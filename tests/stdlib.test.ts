/**
 * اختبارات المكتبة القياسية
 */

import { الثوابت, الإحصاء, الجبر_الخطي, نظرية_الأعداد } from '../src/stdlib/math';
import { دوال_التنشيط, دوال_الخسارة, التصنيف } from '../src/stdlib/ai';
import { لون, الألوان, نقطة, مستطيل, دائرة } from '../src/stdlib/graphics';

describe('المكتبة القياسية', () => {
  describe('الرياضيات', () => {
    describe('الثوابت', () => {
      test('يجب أن تحتوي على باي', () => {
        expect(الثوابت.باي).toBeCloseTo(Math.PI);
      });

      test('يجب أن تحتوي على أويلر', () => {
        expect(الثوابت.أويلر).toBeCloseTo(Math.E);
      });

      test('يجب أن تحتوي على النسبة الذهبية', () => {
        expect(الثوابت.النسبة_الذهبية).toBeCloseTo(1.618, 2);
      });
    });

    describe('الإحصاء', () => {
      test('يجب أن يحسب المتوسط بشكل صحيح', () => {
        expect(الإحصاء.متوسط([1, 2, 3, 4, 5])).toBe(3);
        expect(الإحصاء.متوسط([10, 20, 30])).toBe(20);
      });

      test('يجب أن يحسب الوسيط بشكل صحيح', () => {
        expect(الإحصاء.وسيط([1, 2, 3, 4, 5])).toBe(3);
        expect(الإحصاء.وسيط([1, 2, 3, 4])).toBe(2.5);
      });

      test('يجب أن يحسب التباين بشكل صحيح', () => {
        const تباين = الإحصاء.تباين([2, 4, 4, 4, 5, 5, 7, 9]);
        expect(تباين).toBeCloseTo(4, 0);
      });

      test('يجب أن يحسب الانحراف المعياري بشكل صحيح', () => {
        const انحراف = الإحصاء.انحراف_معياري([2, 4, 4, 4, 5, 5, 7, 9]);
        expect(انحراف).toBeCloseTo(2, 0);
      });

      test('يجب أن يحسب المدى بشكل صحيح', () => {
        expect(الإحصاء.مدى([1, 5, 3, 9, 2])).toBe(8);
      });

      test('يجب أن يحسب المجموع بشكل صحيح', () => {
        expect(الإحصاء.مجموع([1, 2, 3, 4, 5])).toBe(15);
      });
    });

    describe('الجبر الخطي', () => {
      test('يجب أن يحسب الضرب النقطي بشكل صحيح', () => {
        const نتيجة = الجبر_الخطي.ضرب_نقطي([1, 2, 3], [4, 5, 6]);
        expect(نتيجة).toBe(32); // 1*4 + 2*5 + 3*6 = 32
      });

      test('يجب أن يحسب طول المتجه بشكل صحيح', () => {
        const طول = الجبر_الخطي.طول_متجه([3, 4]);
        expect(طول).toBe(5); // جذر(9 + 16) = 5
      });

      test('يجب أن يطبع المتجه بشكل صحيح', () => {
        const متجه = الجبر_الخطي.تطبيع_متجه([3, 4]);
        expect(متجه[0]).toBeCloseTo(0.6);
        expect(متجه[1]).toBeCloseTo(0.8);
      });

      test('يجب أن يجمع المتجهات بشكل صحيح', () => {
        const نتيجة = الجبر_الخطي.جمع_متجهات([1, 2, 3], [4, 5, 6]);
        expect(نتيجة).toEqual([5, 7, 9]);
      });

      test('يجب أن يطرح المتجهات بشكل صحيح', () => {
        const نتيجة = الجبر_الخطي.طرح_متجهات([5, 7, 9], [1, 2, 3]);
        expect(نتيجة).toEqual([4, 5, 6]);
      });

      test('يجب أن يحسب المسافة بشكل صحيح', () => {
        const مسافة = الجبر_الخطي.مسافة([0, 0], [3, 4]);
        expect(مسافة).toBe(5);
      });
    });

    describe('نظرية الأعداد', () => {
      test('يجب أن يحسب القاسم المشترك الأكبر بشكل صحيح', () => {
        expect(نظرية_الأعداد.قاسم_مشترك_أكبر(48, 18)).toBe(6);
        expect(نظرية_الأعداد.قاسم_مشترك_أكبر(100, 50)).toBe(50);
      });

      test('يجب أن يحسب المضاعف المشترك الأصغر بشكل صحيح', () => {
        expect(نظرية_الأعداد.مضاعف_مشترك_أصغر(4, 6)).toBe(12);
        expect(نظرية_الأعداد.مضاعف_مشترك_أصغر(3, 5)).toBe(15);
      });

      test('يجب أن يتحقق من الأعداد الأولية بشكل صحيح', () => {
        expect(نظرية_الأعداد.هل_أولي(2)).toBe(true);
        expect(نظرية_الأعداد.هل_أولي(3)).toBe(true);
        expect(نظرية_الأعداد.هل_أولي(4)).toBe(false);
        expect(نظرية_الأعداد.هل_أولي(17)).toBe(true);
        expect(نظرية_الأعداد.هل_أولي(20)).toBe(false);
      });

      test('يجب أن يحسب المضروب بشكل صحيح', () => {
        expect(نظرية_الأعداد.مضروب(0)).toBe(1);
        expect(نظرية_الأعداد.مضروب(1)).toBe(1);
        expect(نظرية_الأعداد.مضروب(5)).toBe(120);
        expect(نظرية_الأعداد.مضروب(10)).toBe(3628800);
      });

      test('يجب أن يحسب التوافيق بشكل صحيح', () => {
        expect(نظرية_الأعداد.توافيق(5, 2)).toBe(10);
        expect(نظرية_الأعداد.توافيق(10, 3)).toBe(120);
      });

      test('يجب أن يحسب التباديل بشكل صحيح', () => {
        expect(نظرية_الأعداد.تباديل(5, 2)).toBe(20);
        expect(نظرية_الأعداد.تباديل(10, 3)).toBe(720);
      });
    });
  });

  describe('الذكاء الاصطناعي', () => {
    describe('دوال التنشيط', () => {
      test('يجب أن تحسب Sigmoid بشكل صحيح', () => {
        expect(دوال_التنشيط.سيجمويد(0)).toBeCloseTo(0.5);
        expect(دوال_التنشيط.سيجمويد(100)).toBeCloseTo(1);
        expect(دوال_التنشيط.سيجمويد(-100)).toBeCloseTo(0);
      });

      test('يجب أن تحسب ReLU بشكل صحيح', () => {
        expect(دوال_التنشيط.ريلو(5)).toBe(5);
        expect(دوال_التنشيط.ريلو(-5)).toBe(0);
        expect(دوال_التنشيط.ريلو(0)).toBe(0);
      });

      test('يجب أن تحسب Tanh بشكل صحيح', () => {
        expect(دوال_التنشيط.تانه(0)).toBeCloseTo(0);
        expect(دوال_التنشيط.تانه(100)).toBeCloseTo(1);
        expect(دوال_التنشيط.تانه(-100)).toBeCloseTo(-1);
      });

      test('يجب أن تحسب Softmax بشكل صحيح', () => {
        const نتيجة = دوال_التنشيط.سوفت_ماكس([1, 2, 3]);
        expect(نتيجة.reduce((م, ق) => م + ق, 0)).toBeCloseTo(1);
        expect(نتيجة[2]).toBeGreaterThan(نتيجة[1]);
        expect(نتيجة[1]).toBeGreaterThan(نتيجة[0]);
      });
    });

    describe('دوال الخسارة', () => {
      test('يجب أن تحسب MSE بشكل صحيح', () => {
        const خسارة = دوال_الخسارة.خطأ_تربيعي_متوسط([1, 2, 3], [1, 2, 3]);
        expect(خسارة).toBe(0);

        const خسارة2 = دوال_الخسارة.خطأ_تربيعي_متوسط([1, 2, 3], [2, 3, 4]);
        expect(خسارة2).toBe(1);
      });

      test('يجب أن تحسب MAE بشكل صحيح', () => {
        const خسارة = دوال_الخسارة.خطأ_مطلق_متوسط([1, 2, 3], [1, 2, 3]);
        expect(خسارة).toBe(0);

        const خسارة2 = دوال_الخسارة.خطأ_مطلق_متوسط([1, 2, 3], [2, 3, 4]);
        expect(خسارة2).toBe(1);
      });
    });

    describe('التصنيف', () => {
      test('يجب أن يصنف باستخدام KNN بشكل صحيح', () => {
        const بيانات = [
          { ميزات: [1, 1], تصنيف: 'أ' },
          { ميزات: [2, 2], تصنيف: 'أ' },
          { ميزات: [10, 10], تصنيف: 'ب' },
          { ميزات: [11, 11], تصنيف: 'ب' },
        ];

        const تصنيف1 = التصنيف.أقرب_ك_جيران(بيانات, [1.5, 1.5], 3);
        expect(تصنيف1).toBe('أ');

        const تصنيف2 = التصنيف.أقرب_ك_جيران(بيانات, [10.5, 10.5], 3);
        expect(تصنيف2).toBe('ب');
      });
    });
  });

  describe('الجرافيك', () => {
    describe('الألوان', () => {
      test('يجب أن ينشئ لون بشكل صحيح', () => {
        const لون_أحمر = new لون(255, 0, 0);
        expect(لون_أحمر.أحمر).toBe(255);
        expect(لون_أحمر.أخضر).toBe(0);
        expect(لون_أحمر.أزرق).toBe(0);
      });

      test('يجب أن يحول إلى RGB بشكل صحيح', () => {
        const لون_أحمر = new لون(255, 0, 0);
        expect(لون_أحمر.إلى_نص()).toBe('rgb(255, 0, 0)');
      });

      test('يجب أن يحول إلى Hex بشكل صحيح', () => {
        const لون_أحمر = new لون(255, 0, 0);
        expect(لون_أحمر.إلى_هيكس()).toBe('#ff0000');
      });

      test('يجب أن ينشئ لون من Hex بشكل صحيح', () => {
        const لون_أحمر = لون.من_هيكس('#ff0000');
        expect(لون_أحمر.أحمر).toBe(255);
        expect(لون_أحمر.أخضر).toBe(0);
        expect(لون_أحمر.أزرق).toBe(0);
      });

      test('يجب أن يحتوي على ألوان محددة مسبقاً', () => {
        expect(الألوان.أحمر.أحمر).toBe(255);
        expect(الألوان.أخضر.أخضر).toBe(255);
        expect(الألوان.أزرق.أزرق).toBe(255);
      });
    });

    describe('النقاط', () => {
      test('يجب أن تحسب المسافة بين نقطتين بشكل صحيح', () => {
        const نقطة1 = new نقطة(0, 0);
        const نقطة2 = new نقطة(3, 4);
        expect(نقطة1.مسافة_إلى(نقطة2)).toBe(5);
      });

      test('يجب أن تنسخ النقطة بشكل صحيح', () => {
        const نقطة1 = new نقطة(5, 10);
        const نقطة2 = نقطة1.نسخ();
        expect(نقطة2.س).toBe(5);
        expect(نقطة2.ص).toBe(10);
        expect(نقطة2).not.toBe(نقطة1);
      });
    });

    describe('المستطيلات', () => {
      test('يجب أن تتحقق من احتواء نقطة بشكل صحيح', () => {
        const مستطيل1 = new مستطيل(0, 0, 10, 10);
        expect(مستطيل1.يحتوي_نقطة(new نقطة(5, 5))).toBe(true);
        expect(مستطيل1.يحتوي_نقطة(new نقطة(15, 15))).toBe(false);
      });

      test('يجب أن تتحقق من التقاطع بشكل صحيح', () => {
        const مستطيل1 = new مستطيل(0, 0, 10, 10);
        const مستطيل2 = new مستطيل(5, 5, 10, 10);
        const مستطيل3 = new مستطيل(20, 20, 10, 10);

        expect(مستطيل1.يتقاطع_مع(مستطيل2)).toBe(true);
        expect(مستطيل1.يتقاطع_مع(مستطيل3)).toBe(false);
      });

      test('يجب أن تحسب المساحة بشكل صحيح', () => {
        const مستطيل1 = new مستطيل(0, 0, 10, 5);
        expect(مستطيل1.مساحة()).toBe(50);
      });

      test('يجب أن تحسب المحيط بشكل صحيح', () => {
        const مستطيل1 = new مستطيل(0, 0, 10, 5);
        expect(مستطيل1.محيط()).toBe(30);
      });
    });

    describe('الدوائر', () => {
      test('يجب أن تتحقق من احتواء نقطة بشكل صحيح', () => {
        const دائرة1 = new دائرة(new نقطة(0, 0), 5);
        expect(دائرة1.يحتوي_نقطة(new نقطة(3, 0))).toBe(true);
        expect(دائرة1.يحتوي_نقطة(new نقطة(10, 0))).toBe(false);
      });

      test('يجب أن تتحقق من التقاطع بشكل صحيح', () => {
        const دائرة1 = new دائرة(new نقطة(0, 0), 5);
        const دائرة2 = new دائرة(new نقطة(8, 0), 5);
        const دائرة3 = new دائرة(new نقطة(20, 0), 5);

        expect(دائرة1.يتقاطع_مع(دائرة2)).toBe(true);
        expect(دائرة1.يتقاطع_مع(دائرة3)).toBe(false);
      });

      test('يجب أن تحسب المساحة بشكل صحيح', () => {
        const دائرة1 = new دائرة(new نقطة(0, 0), 5);
        expect(دائرة1.مساحة()).toBeCloseTo(Math.PI * 25);
      });

      test('يجب أن تحسب المحيط بشكل صحيح', () => {
        const دائرة1 = new دائرة(new نقطة(0, 0), 5);
        expect(دائرة1.محيط()).toBeCloseTo(Math.PI * 10);
      });
    });
  });
});

