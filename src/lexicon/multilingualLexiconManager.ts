/**
 * Multilingual Lexicon Manager
 * مدير المعاجم متعدد اللغات
 * 
 * Unified manager for Arabic and English lexicons
 * مدير موحد للمعاجم العربية والإنجليزية
 */

import { RootAnalyzer, WordRoot, RootFamily } from './rootAnalyzer';
import { DerivationGenerator, Derivation } from './derivationGenerator';
import { EnglishRootAnalyzer, EnglishWordRoot, EnglishRootFamily } from './englishRootAnalyzer';
import { EnglishDerivationGenerator, EnglishDerivation } from './englishDerivationGenerator';
import { LexiconEngine, LexiconEntry, WordType, SearchOptions } from './lexiconEngine';

export type SupportedLanguage = 'arabic' | 'english' | 'both';

export interface MultilingualLexiconAnalysis {
  word: string;
  language: SupportedLanguage;
  entry: LexiconEntry | null;
  root: WordRoot | EnglishWordRoot | null;
  derivations: (Derivation | EnglishDerivation)[];
  relatedWords: string[];
  confidence: number;
  timestamp: number;
}

export interface MultilingualLexiconSettings {
  autoGenerateDerivations: boolean;
  autoDetectRoot: boolean;
  autoDetectLanguage: boolean;
  minConfidenceThreshold: number;
  maxDerivations: number;
}

/**
 * Multilingual Lexicon Manager
 * مدير المعاجم متعدد اللغات
 */
export class MultilingualLexiconManager {
  // Arabic components
  private arabicRootAnalyzer: RootAnalyzer;
  private arabicDerivationGenerator: DerivationGenerator;
  
  // English components
  private englishRootAnalyzer: EnglishRootAnalyzer;
  private englishDerivationGenerator: EnglishDerivationGenerator;
  
  // Shared lexicon engine
  private lexiconEngine: LexiconEngine;
  
  // Settings
  private settings: MultilingualLexiconSettings;
  
  constructor(settings: Partial<MultilingualLexiconSettings> = {}) {
    this.arabicRootAnalyzer = new RootAnalyzer();
    this.arabicDerivationGenerator = new DerivationGenerator();
    this.englishRootAnalyzer = new EnglishRootAnalyzer();
    this.englishDerivationGenerator = new EnglishDerivationGenerator();
    this.lexiconEngine = new LexiconEngine();
    
    this.settings = {
      autoGenerateDerivations: settings.autoGenerateDerivations ?? true,
      autoDetectRoot: settings.autoDetectRoot ?? true,
      autoDetectLanguage: settings.autoDetectLanguage ?? true,
      minConfidenceThreshold: settings.minConfidenceThreshold ?? 0.5,
      maxDerivations: settings.maxDerivations ?? 10
    };
  }
  
  /**
   * Detect language of word
   * كشف لغة الكلمة
   */
  detectLanguage(word: string): SupportedLanguage {
    const arabicPattern = /[\u0600-\u06FF]/;
    const englishPattern = /[a-zA-Z]/;
    
    const hasArabic = arabicPattern.test(word);
    const hasEnglish = englishPattern.test(word);
    
    if (hasArabic && hasEnglish) return 'both';
    if (hasArabic) return 'arabic';
    if (hasEnglish) return 'english';
    
    return 'english'; // default
  }
  
  /**
   * Add word to lexicon
   * إضافة كلمة للمعجم
   */
  addWord(
    word: string,
    type: WordType,
    definition: string,
    language?: SupportedLanguage
  ): LexiconEntry {
    const detectedLanguage = language || this.detectLanguage(word);
    
    // Analyze root based on language
    let root: string | null = null;
    
    if (detectedLanguage === 'arabic' && this.settings.autoDetectRoot) {
      const rootInfo = this.arabicRootAnalyzer.analyzeRoot(word);
      root = rootInfo.root;
    } else if (detectedLanguage === 'english' && this.settings.autoDetectRoot) {
      const rootInfo = this.englishRootAnalyzer.analyzeRoot(word);
      root = rootInfo.stem;
    }
    
    // Add to lexicon engine
    const entry = this.lexiconEngine.addEntry(word, type, definition, root);
    
    // Generate derivations if enabled
    if (this.settings.autoGenerateDerivations) {
      this.generateDerivationsForWord(word, detectedLanguage);
    }
    
    return entry;
  }
  
  /**
   * Generate derivations for word
   * توليد اشتقاقات للكلمة
   */
  private generateDerivationsForWord(word: string, language: SupportedLanguage): void {
    if (language === 'arabic') {
      const rootInfo = this.arabicRootAnalyzer.analyzeRoot(word);
      if (rootInfo.confidence >= this.settings.minConfidenceThreshold) {
        this.arabicDerivationGenerator.generateAllForms(rootInfo.root);
      }
    } else if (language === 'english') {
      this.englishDerivationGenerator.generateAllDerivations(word);
    }
  }
  
  /**
   * Analyze word in any language
   * تحليل كلمة بأي لغة
   */
  analyzeWord(word: string): MultilingualLexiconAnalysis {
    const language = this.settings.autoDetectLanguage 
      ? this.detectLanguage(word) 
      : 'english';
    
    const entry = this.lexiconEngine.getEntry(word);
    
    let root: WordRoot | EnglishWordRoot | null = null;
    let derivations: (Derivation | EnglishDerivation)[] = [];
    let relatedWords: string[] = [];
    let confidence = 0.5;
    
    if (language === 'arabic') {
      const arabicRoot = this.arabicRootAnalyzer.analyzeRoot(word);
      root = arabicRoot;
      confidence = arabicRoot.confidence;
      
      if (confidence >= this.settings.minConfidenceThreshold) {
        derivations = this.arabicDerivationGenerator
          .generateAllForms(arabicRoot.root)
          .slice(0, this.settings.maxDerivations);
      }
      
      relatedWords = this.arabicRootAnalyzer.findRelatedWords(word);
      
    } else if (language === 'english') {
      const englishRoot = this.englishRootAnalyzer.analyzeRoot(word);
      root = englishRoot;
      confidence = englishRoot.confidence;
      
      if (confidence >= this.settings.minConfidenceThreshold) {
        derivations = this.englishDerivationGenerator
          .generateAllDerivations(word)
          .slice(0, this.settings.maxDerivations);
      }
      
      relatedWords = this.englishRootAnalyzer.findRelatedWords(word);
    }
    
    return {
      word,
      language,
      entry,
      root,
      derivations,
      relatedWords,
      confidence,
      timestamp: Date.now()
    };
  }
  
  /**
   * Search in lexicon
   * البحث في المعجم
   */
  search(query: string, options: SearchOptions = {}): LexiconEntry[] {
    return this.lexiconEngine.search(query, options);
  }
  
  /**
   * Get word entry
   * الحصول على مدخل الكلمة
   */
  getWord(word: string): LexiconEntry | null {
    return this.lexiconEngine.getEntry(word);
  }
  
  /**
   * Get root family (Arabic)
   * الحصول على عائلة الجذر (عربي)
   */
  getArabicRootFamily(root: string): RootFamily | null {
    return this.arabicRootAnalyzer.getRootFamily(root);
  }
  
  /**
   * Get root family (English)
   * الحصول على عائلة الجذر (إنجليزي)
   */
  getEnglishRootFamily(root: string): EnglishRootFamily | null {
    return this.englishRootAnalyzer.getRootFamily(root);
  }
  
  /**
   * Get statistics
   * الحصول على الإحصائيات
   */
  getStatistics(): {
    arabic: {
      totalRoots: number;
      totalFamilies: number;
      averageDerivations: number;
    };
    english: {
      totalRoots: number;
      totalFamilies: number;
      averageDerivations: number;
    };
    lexicon: {
      totalEntries: number;
      byLanguage: Record<SupportedLanguage, number>;
    };
  } {
    const arabicStats = this.arabicRootAnalyzer.getStatistics();
    const englishStats = this.englishRootAnalyzer.getStatistics();
    
    // Count entries by language
    const byLanguage: Record<SupportedLanguage, number> = {
      arabic: 0,
      english: 0,
      both: 0
    };
    
    const allEntries = this.lexiconEngine.getAllEntries();
    for (const entry of allEntries) {
      const lang = this.detectLanguage(entry.word);
      byLanguage[lang]++;
    }
    
    return {
      arabic: {
        totalRoots: arabicStats.totalRoots,
        totalFamilies: arabicStats.totalFamilies,
        averageDerivations: arabicStats.averageDerivations
      },
      english: {
        totalRoots: englishStats.totalRoots,
        totalFamilies: englishStats.totalFamilies,
        averageDerivations: englishStats.averageDerivations
      },
      lexicon: {
        totalEntries: allEntries.length,
        byLanguage
      }
    };
  }
  
  /**
   * Update settings
   * تحديث الإعدادات
   */
  updateSettings(settings: Partial<MultilingualLexiconSettings>): void {
    this.settings = { ...this.settings, ...settings };
  }
  
  /**
   * Get current settings
   * الحصول على الإعدادات الحالية
   */
  getSettings(): MultilingualLexiconSettings {
    return { ...this.settings };
  }
  
  /**
   * Clear all data
   * مسح جميع البيانات
   */
  clear(): void {
    this.arabicRootAnalyzer.clear();
    this.arabicDerivationGenerator.clear();
    this.englishRootAnalyzer.clear();
    this.englishDerivationGenerator.clear();
    this.lexiconEngine.clear();
  }
  
  /**
   * Export lexicon data
   * تصدير بيانات المعجم
   */
  exportData(): {
    entries: LexiconEntry[];
    arabicRoots: number;
    englishRoots: number;
    timestamp: number;
  } {
    const stats = this.getStatistics();
    
    return {
      entries: this.lexiconEngine.getAllEntries(),
      arabicRoots: stats.arabic.totalRoots,
      englishRoots: stats.english.totalRoots,
      timestamp: Date.now()
    };
  }
}

/**
 * Global instance for easy access
 * نسخة عامة للوصول السهل
 */
export const multilingualLexicon = new MultilingualLexiconManager();

