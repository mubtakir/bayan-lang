/**
 * مدير المعاجم - Lexicon Manager
 * Integrates all lexicon components
 */

import { RootAnalyzer, WordRoot, RootFamily } from './rootAnalyzer';
import { DerivationGenerator, Derivation, DerivationType, DerivationForm } from './derivationGenerator';
import { LexiconEngine, LexiconEntry, WordType, SearchOptions } from './lexiconEngine';

export interface LexiconAnalysis {
  word: string;
  entry: LexiconEntry | null;
  root: WordRoot | null;
  derivations: Derivation[];
  relatedWords: string[];
  timestamp: number;
}

export interface LexiconSettings {
  autoGenerateDerivations: boolean;
  autoDetectRoot: boolean;
  minConfidenceThreshold: number;
  maxDerivations: number;
}

export class LexiconManager {
  private rootAnalyzer: RootAnalyzer;
  private derivationGenerator: DerivationGenerator;
  private lexiconEngine: LexiconEngine;
  
  private settings: LexiconSettings = {
    autoGenerateDerivations: true,
    autoDetectRoot: true,
    minConfidenceThreshold: 0.5,
    maxDerivations: 10
  };
  
  constructor() {
    this.rootAnalyzer = new RootAnalyzer();
    this.derivationGenerator = new DerivationGenerator();
    this.lexiconEngine = new LexiconEngine();
  }
  
  // Add word with full analysis
  addWord(
    word: string,
    type: WordType,
    definition: string,
    autoAnalyze: boolean = true
  ): LexiconAnalysis {
    // Add to lexicon
    let root: string | null = null;
    
    // Analyze root if enabled
    if (autoAnalyze && this.settings.autoDetectRoot) {
      const rootInfo = this.rootAnalyzer.analyzeRoot(word);
      if (rootInfo.confidence >= this.settings.minConfidenceThreshold) {
        root = rootInfo.root;
      }
    }
    
    const entry = this.lexiconEngine.addEntry(word, type, definition, root);
    
    // Generate derivations if enabled
    const derivations: Derivation[] = [];
    if (autoAnalyze && this.settings.autoGenerateDerivations && root) {
      const allDerivations = this.derivationGenerator.generateAllForms(root);
      derivations.push(...allDerivations.slice(0, this.settings.maxDerivations));
    }
    
    // Find related words
    const relatedWords = root ? this.rootAnalyzer.findRelatedWords(word) : [];
    
    return {
      word,
      entry,
      root: this.rootAnalyzer.getRoot(word),
      derivations,
      relatedWords,
      timestamp: Date.now()
    };
  }
  
  // Analyze existing word
  analyzeWord(word: string): LexiconAnalysis {
    const entry = this.lexiconEngine.getEntry(word);
    const rootInfo = this.rootAnalyzer.analyzeRoot(word);
    
    const derivations = rootInfo.confidence >= this.settings.minConfidenceThreshold
      ? this.derivationGenerator.generateAllForms(rootInfo.root).slice(0, this.settings.maxDerivations)
      : [];
    
    const relatedWords = this.rootAnalyzer.findRelatedWords(word);
    
    return {
      word,
      entry,
      root: rootInfo,
      derivations,
      relatedWords,
      timestamp: Date.now()
    };
  }
  
  // Search in lexicon
  search(query: string, options: SearchOptions = {}): LexiconEntry[] {
    return this.lexiconEngine.search(query, options);
  }
  
  // Get word entry
  getWord(word: string): LexiconEntry | null {
    return this.lexiconEngine.getEntry(word);
  }
  
  // Find words by root
  findByRoot(root: string): {
    entries: LexiconEntry[];
    family: RootFamily | null;
    derivations: Derivation[];
  } {
    const entries = this.lexiconEngine.findByRoot(root);
    const family = this.rootAnalyzer.getRootFamily(root);
    const derivations = this.derivationGenerator.findDerivationsByRoot(root);
    
    return { entries, family, derivations };
  }
  
  // Generate derivation
  generateDerivation(
    root: string,
    type: DerivationType,
    form: DerivationForm = 'form_i',
    meaning: string = ''
  ): Derivation {
    return this.derivationGenerator.generateDerivation(root, type, form, meaning);
  }
  
  // Add example to word
  addExample(word: string, example: string): boolean {
    return this.lexiconEngine.addExample(word, example);
  }
  
  // Add synonym
  addSynonym(word: string, synonym: string): boolean {
    return this.lexiconEngine.addSynonym(word, synonym);
  }
  
  // Add antonym
  addAntonym(word: string, antonym: string): boolean {
    return this.lexiconEngine.addAntonym(word, antonym);
  }
  
  // Update settings
  updateSettings(newSettings: Partial<LexiconSettings>): void {
    this.settings = { ...this.settings, ...newSettings };
  }
  
  // Get settings
  getSettings(): LexiconSettings {
    return { ...this.settings };
  }
  
  // Get component access
  getRootAnalyzer(): RootAnalyzer {
    return this.rootAnalyzer;
  }
  
  getDerivationGenerator(): DerivationGenerator {
    return this.derivationGenerator;
  }
  
  getLexiconEngine(): LexiconEngine {
    return this.lexiconEngine;
  }
  
  // Get comprehensive statistics
  getStatistics(): {
    lexicon: ReturnType<LexiconEngine['getStatistics']>;
    roots: ReturnType<RootAnalyzer['getStatistics']>;
    derivations: ReturnType<DerivationGenerator['getStatistics']>;
  } {
    return {
      lexicon: this.lexiconEngine.getStatistics(),
      roots: this.rootAnalyzer.getStatistics(),
      derivations: this.derivationGenerator.getStatistics()
    };
  }
  
  // Clear all data
  clearAll(): void {
    this.rootAnalyzer.clear();
    this.derivationGenerator.clear();
    this.lexiconEngine.clear();
  }
}

