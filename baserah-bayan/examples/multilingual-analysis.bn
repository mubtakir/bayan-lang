/*
 * Multilingual Personality Analysis Example
 * مثال تحليل الشخصية متعدد اللغات
 * 
 * This example demonstrates Bayan language's ability to analyze
 * names in both Arabic and English using letter semantic analysis.
 * 
 * يوضح هذا المثال قدرة لغة البيان على تحليل
 * الأسماء بالعربية والإنجليزية باستخدام التحليل الدلالي للحروف.
 */

// ═══════════════════════════════════════════════════════════════
// Part 1: Letter Meanings Database (Multilingual)
// الجزء الأول: قاعدة بيانات معاني الحروف (متعددة اللغات)
// ═══════════════════════════════════════════════════════════════

// Arabic Letter Meanings (Based on 40 years of research)
fact letter_meaning("ل", "لين");          // softness
fact letter_meaning("ل", "تكرار");        // rumination
fact letter_meaning("ي", "اتصال");        // connection
fact letter_meaning("ي", "تطلع");         // aspiration
fact letter_meaning("ى", "امتداد");       // extension

fact letter_meaning("م", "جمع");          // gathering
fact letter_meaning("ح", "حياة");         // life
fact letter_meaning("د", "ثبات");         // stability

// English Letter Meanings (Placeholder - to be filled later)
fact letter_meaning("a", "meaning1");
fact letter_meaning("a", "meaning2");
fact letter_meaning("a", "meaning3");

fact letter_meaning("l", "meaning1");
fact letter_meaning("l", "meaning2");
fact letter_meaning("l", "meaning3");

fact letter_meaning("e", "meaning1");
fact letter_meaning("e", "meaning2");
fact letter_meaning("e", "meaning3");

fact letter_meaning("x", "meaning1");
fact letter_meaning("x", "meaning2");
fact letter_meaning("x", "meaning3");

// ═══════════════════════════════════════════════════════════════
// Part 2: Language Detection
// الجزء الثاني: كشف اللغة
// ═══════════════════════════════════════════════════════════════

function detect_language(text: string): string {
    const arabic_pattern = /[\u0600-\u06FF]/;
    const english_pattern = /[a-zA-Z]/;
    
    const has_arabic = arabic_pattern.test(text);
    const has_english = english_pattern.test(text);
    
    if has_arabic && has_english {
        return "mixed";
    } else if has_arabic {
        return "arabic";
    } else if has_english {
        return "english";
    } else {
        return "unknown";
    }
}

// ═══════════════════════════════════════════════════════════════
// Part 3: Multilingual Person Class
// الجزء الثالث: صنف الشخص متعدد اللغات
// ═══════════════════════════════════════════════════════════════

class MultilingualPerson {
    constructor(name: string, language: string = "auto") {
        this.name = name;
        this.language = language === "auto" ? detect_language(name) : language;
        this.traits = [];
        this.state = "stable";
        
        this.analyze_from_name();
    }
    
    function analyze_from_name() {
        const letters = this.name.split('');
        
        print(`\n🔍 Analyzing name: ${this.name}`);
        print(`   Language detected: ${this.language}`);
        print(`   Letters: ${letters.join(', ')}`);
        
        for letter in letters {
            // Query letter meanings from knowledge base
            // In real system: findall(?meaning, query letter_meaning(?letter, ?meaning))
            
            // For now, we'll use a simple lookup
            const meanings = this.get_letter_meanings(letter);
            
            if meanings.length > 0 {
                print(`   Letter '${letter}' → ${meanings.join(', ')}`);
                this.traits.push(...meanings);
            }
        }
        
        // Remove duplicates
        this.traits = [...new Set(this.traits)];
        
        print(`\n✅ Extracted traits: ${this.traits.join(', ')}`);
    }
    
    function get_letter_meanings(letter: string): array {
        // This would query the knowledge base in real system
        // For demonstration, we'll use hardcoded values
        
        const meanings_db = {
            // Arabic
            "ل": ["لين", "تكرار"],
            "ي": ["اتصال", "تطلع"],
            "ى": ["امتداد"],
            "م": ["جمع"],
            "ح": ["حياة"],
            "د": ["ثبات"],
            
            // English (placeholders)
            "a": ["meaning1", "meaning2", "meaning3"],
            "l": ["meaning1", "meaning2", "meaning3"],
            "e": ["meaning1", "meaning2", "meaning3"],
            "x": ["meaning1", "meaning2", "meaning3"]
        };
        
        return meanings_db[letter] || [];
    }
    
    function display_profile() {
        print("\n" + "═".repeat(60));
        print(`👤 Profile for: ${this.name}`);
        print("═".repeat(60));
        print(`Language: ${this.language}`);
        print(`Traits: ${this.traits.join(", ")}`);
        print(`State: ${this.state}`);
        print("═".repeat(60));
    }
}

// ═══════════════════════════════════════════════════════════════
// Part 4: Comparison Function
// الجزء الرابع: دالة المقارنة
// ═══════════════════════════════════════════════════════════════

function compare_personalities(person1: MultilingualPerson, person2: MultilingualPerson) {
    print("\n" + "═".repeat(60));
    print("🔄 Comparing Personalities");
    print("═".repeat(60));
    
    print(`\n${person1.name} (${person1.language}):`);
    print(`  Traits: ${person1.traits.join(", ")}`);
    
    print(`\n${person2.name} (${person2.language}):`);
    print(`  Traits: ${person2.traits.join(", ")}`);
    
    // Find common traits
    const common = person1.traits.filter(t => person2.traits.includes(t));
    
    print(`\n🤝 Common traits: ${common.length > 0 ? common.join(", ") : "None"}`);
    
    // Find unique traits
    const unique1 = person1.traits.filter(t => !person2.traits.includes(t));
    const unique2 = person2.traits.filter(t => !person1.traits.includes(t));
    
    print(`\n🌟 Unique to ${person1.name}: ${unique1.join(", ")}`);
    print(`🌟 Unique to ${person2.name}: ${unique2.join(", ")}`);
    
    print("\n" + "═".repeat(60));
}

// ═══════════════════════════════════════════════════════════════
// Part 5: Main Execution
// الجزء الخامس: التنفيذ الرئيسي
// ═══════════════════════════════════════════════════════════════

function main() {
    print("═".repeat(70));
    print("🌍 Baserah AI - Multilingual Personality Analysis");
    print("نظام بصيرة AI - تحليل الشخصية متعدد اللغات");
    print("═".repeat(70));
    
    // Example 1: Arabic name
    print("\n\n📋 Example 1: Arabic Name Analysis");
    print("مثال 1: تحليل اسم عربي");
    const layla = new MultilingualPerson("ليلى");
    layla.display_profile();
    
    // Example 2: English name
    print("\n\n📋 Example 2: English Name Analysis");
    print("مثال 2: تحليل اسم إنجليزي");
    const alex = new MultilingualPerson("Alex");
    alex.display_profile();
    
    // Example 3: Another Arabic name
    print("\n\n📋 Example 3: Another Arabic Name");
    print("مثال 3: اسم عربي آخر");
    const mohammed = new MultilingualPerson("محمد");
    mohammed.display_profile();
    
    // Example 4: Compare personalities
    print("\n\n📋 Example 4: Personality Comparison");
    print("مثال 4: مقارنة الشخصيات");
    compare_personalities(layla, mohammed);
    
    // Summary
    print("\n\n" + "═".repeat(70));
    print("✅ Analysis Complete!");
    print("═".repeat(70));
    print("\n💡 Key Features Demonstrated:");
    print("   ✅ Automatic language detection");
    print("   ✅ Arabic letter semantic analysis");
    print("   ✅ English letter semantic analysis (placeholder)");
    print("   ✅ Multilingual support in one system");
    print("   ✅ Personality comparison across languages");
    print("\n🚀 This multilingual capability is unique to Bayan language!");
    print("هذه القدرة متعددة اللغات فريدة للغة البيان!");
    print("═".repeat(70));
}

// Run the program
main()

