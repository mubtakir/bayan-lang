/**
 * مكتبة الجرافيك والرسم للغة البيان
 */
/**
 * الألوان
 */
export declare class لون {
    أحمر: number;
    أخضر: number;
    أزرق: number;
    شفافية: number;
    constructor(أحمر: number, أخضر: number, أزرق: number, شفافية?: number);
    /**
     * تحويل إلى RGB
     */
    إلى_نص(): string;
    /**
     * تحويل إلى Hex
     */
    إلى_هيكس(): string;
    /**
     * إنشاء لون من Hex
     */
    static من_هيكس(هيكس: string): لون;
    /**
     * إنشاء لون من HSL
     */
    static من_HSL(صبغة: number, تشبع: number, إضاءة: number): لون;
}
/**
 * الألوان المحددة مسبقاً
 */
export declare const الألوان: {
    أحمر: لون;
    أخضر: لون;
    أزرق: لون;
    أصفر: لون;
    أرجواني: لون;
    سماوي: لون;
    أبيض: لون;
    أسود: لون;
    رمادي: لون;
    برتقالي: لون;
    وردي: لون;
    بنفسجي: لون;
    بني: لون;
    ذهبي: لون;
    فضي: لون;
};
/**
 * النقطة
 */
export declare class نقطة {
    س: number;
    ص: number;
    constructor(س: number, ص: number);
    /**
     * المسافة إلى نقطة أخرى
     */
    مسافة_إلى(نقطة_أخرى: نقطة): number;
    /**
     * نسخ النقطة
     */
    نسخ(): نقطة;
}
/**
 * المستطيل
 */
export declare class مستطيل {
    س: number;
    ص: number;
    عرض: number;
    ارتفاع: number;
    constructor(س: number, ص: number, عرض: number, ارتفاع: number);
    /**
     * التحقق من احتواء نقطة
     */
    يحتوي_نقطة(نقطة: نقطة): boolean;
    /**
     * التحقق من التقاطع مع مستطيل آخر
     */
    يتقاطع_مع(مستطيل_آخر: مستطيل): boolean;
    /**
     * المساحة
     */
    مساحة(): number;
    /**
     * المحيط
     */
    محيط(): number;
}
/**
 * الدائرة
 */
export declare class دائرة {
    مركز: نقطة;
    نصف_قطر: number;
    constructor(مركز: نقطة, نصف_قطر: number);
    /**
     * التحقق من احتواء نقطة
     */
    يحتوي_نقطة(نقطة: نقطة): boolean;
    /**
     * التحقق من التقاطع مع دائرة أخرى
     */
    يتقاطع_مع(دائرة_أخرى: دائرة): boolean;
    /**
     * المساحة
     */
    مساحة(): number;
    /**
     * المحيط
     */
    محيط(): number;
}
/**
 * المثلث
 */
export declare class مثلث {
    نقطة1: نقطة;
    نقطة2: نقطة;
    نقطة3: نقطة;
    constructor(نقطة1: نقطة, نقطة2: نقطة, نقطة3: نقطة);
    /**
     * المساحة (باستخدام صيغة هيرون)
     */
    مساحة(): number;
    /**
     * المحيط
     */
    محيط(): number;
}
/**
 * التحويلات الهندسية
 */
export declare const التحويلات: {
    /**
     * الدوران حول نقطة
     */
    دوران: (ن: نقطة, مركز: نقطة, زاوية: number) => نقطة;
    /**
     * التكبير/التصغير
     */
    تكبير: (ن: نقطة, مركز: نقطة, عامل: number) => نقطة;
    /**
     * الانعكاس حول محور X
     */
    انعكاس_أفقي: (ن: نقطة, محور_ص?: number) => نقطة;
    /**
     * الانعكاس حول محور Y
     */
    انعكاس_عمودي: (ن: نقطة, محور_س?: number) => نقطة;
    /**
     * الإزاحة
     */
    إزاحة: (ن: نقطة, إزاحة_س: number, إزاحة_ص: number) => نقطة;
};
/**
 * منحنيات بيزيه
 */
export declare const بيزيه: {
    /**
     * منحنى بيزيه التربيعي
     */
    تربيعي: (نقطة_بداية: نقطة, نقطة_تحكم: نقطة, نقطة_نهاية: نقطة, ت: number) => نقطة;
    /**
     * منحنى بيزيه التكعيبي
     */
    تكعيبي: (نقطة_بداية: نقطة, نقطة_تحكم1: نقطة, نقطة_تحكم2: نقطة, نقطة_نهاية: نقطة, ت: number) => نقطة;
};
