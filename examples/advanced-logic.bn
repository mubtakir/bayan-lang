/**
 * أمثلة متقدمة للبرمجة المنطقية في لغة البيان
 * Advanced Logic Programming Examples in Bayan Language
 * 
 * هذا الملف يوضح الميزات المنطقية المتقدمة التي تفوق Prolog
 * This file demonstrates advanced logic features that surpass Prolog
 */

// ============================================================================
// مثال 1: النفي كفشل (Negation as Failure)
// Example 1: Negation as Failure
// ============================================================================

اطبع("=== مثال 1: النفي كفشل ===");
console.log("=== Example 1: Negation as Failure ===");

// تعريف الحقائق - Define facts
حقيقة متزوج("أحمد");
fact married("Sara");
حقيقة متزوج("علي");

// تعريف قاعدة: أعزب إذا لم يكن متزوجاً
// Define rule: single if not married
قاعدة أعزب(?س) :- ليس متزوج(?س);
rule single(?x) :- not married(?x);

// استعلامات
استعلام أعزب("محمد");  // true - محمد ليس في قائمة المتزوجين
query single("Mohamed");  // true - Mohamed is not in married list

استعلام أعزب("أحمد");   // false - أحمد متزوج
query single("Ahmed");    // false - Ahmed is married

// ============================================================================
// مثال 2: عامل القطع (Cut Operator) - تحسين الأداء
// Example 2: Cut Operator - Performance Optimization
// ============================================================================

اطبع("\n=== مثال 2: عامل القطع ===");
console.log("\n=== Example 2: Cut Operator ===");

// إيجاد الأكبر بين رقمين مع القطع
// Find maximum of two numbers with cut
قاعدة أكبر(?س, ?ص, ?س) :- ?س >= ?ص, قطع;
rule max(?x, ?y, ?x) :- ?x >= ?y, cut;

قاعدة أكبر(?س, ?ص, ?ص);
rule max(?x, ?y, ?y);

استعلام أكبر(10, 5, ?نتيجة);   // ?نتيجة = 10
query max(10, 5, ?result);       // ?result = 10

استعلام أكبر(3, 8, ?نتيجة);    // ?نتيجة = 8
query max(3, 8, ?result);        // ?result = 8

// ============================================================================
// مثال 3: FindAll - جمع كل الحلول
// Example 3: FindAll - Collecting All Solutions
// ============================================================================

اطبع("\n=== مثال 3: جمع كل الحلول ===");
console.log("\n=== Example 3: Collecting All Solutions ===");

// تعريف شجرة عائلة
// Define family tree
حقيقة والد("أحمد", "علي");
fact parent("Ahmed", "Ali");

حقيقة والد("أحمد", "سارة");
fact parent("Ahmed", "Sara");

حقيقة والد("أحمد", "عمر");
fact parent("Ahmed", "Omar");

حقيقة والد("فاطمة", "علي");
fact parent("Fatima", "Ali");

حقيقة والد("فاطمة", "سارة");
fact parent("Fatima", "Sara");

// جمع كل أبناء أحمد
// Collect all children of Ahmed
دع أبناء_أحمد = اجمع_كل(?س, استعلام والد("أحمد", ?س));
let ahmeds_children = findall(?x, query parent("Ahmed", ?x));

اطبع("أبناء أحمد:", أبناء_أحمد);
console.log("Ahmed's children:", ahmeds_children);
// النتيجة: ["علي", "سارة", "عمر"]
// Result: ["Ali", "Sara", "Omar"]

// جمع كل الآباء
// Collect all parents
دع كل_الآباء = اجمع_كل(?والد, استعلام والد(?والد, ?ابن));
let all_parents = findall(?parent, query parent(?parent, ?child));

اطبع("كل الآباء:", كل_الآباء);
console.log("All parents:", all_parents);

// ============================================================================
// مثال 4: BagOf و SetOf - الفرق بين الكيس والمجموعة
// Example 4: BagOf vs SetOf - Difference between Bag and Set
// ============================================================================

اطبع("\n=== مثال 4: BagOf vs SetOf ===");

حقيقة يحب("أحمد", "برمجة");
fact likes("Ahmed", "programming");

حقيقة يحب("أحمد", "قراءة");
fact likes("Ahmed", "reading");

حقيقة يحب("سارة", "برمجة");
fact likes("Sara", "programming");

حقيقة يحب("علي", "برمجة");
fact likes("Ali", "programming");

// BagOf - يحتفظ بالتكرارات
// BagOf - keeps duplicates
دع كيس_الهوايات = كيس_من(?هواية, استعلام يحب(?شخص, ?هواية));
let bag_of_hobbies = bagof(?hobby, query likes(?person, ?hobby));

اطبع("كيس الهوايات (مع التكرار):", كيس_الهوايات);
console.log("Bag of hobbies (with duplicates):", bag_of_hobbies);

// SetOf - يزيل التكرارات
// SetOf - removes duplicates
دع مجموعة_الهوايات = مجموعة_من(?هواية, استعلام يحب(?شخص, ?هواية));
let set_of_hobbies = setof(?hobby, query likes(?person, ?hobby));

اطبع("مجموعة الهوايات (بدون تكرار):", مجموعة_الهوايات);
console.log("Set of hobbies (unique):", set_of_hobbies);

// ============================================================================
// مثال 5: Assert/Retract - التعديل الديناميكي لقاعدة المعرفة
// Example 5: Assert/Retract - Dynamic Knowledge Base Modification
// ============================================================================

اطبع("\n=== مثال 5: التعديل الديناميكي ===");
console.log("\n=== Example 5: Dynamic Modification ===");

// إضافة حقيقة جديدة ديناميكياً
// Add new fact dynamically
أضف موظف("محمد", "مهندس");
assert employee("Mohamed", "engineer");

اطبع("تم إضافة موظف جديد");
console.log("New employee added");

استعلام موظف("محمد", ?وظيفة);  // ?وظيفة = "مهندس"
query employee("Mohamed", ?job);   // ?job = "engineer"

// حذف حقيقة ديناميكياً
// Remove fact dynamically
احذف موظف("محمد", "مهندس");
retract employee("Mohamed", "engineer");

اطبع("تم حذف الموظف");
console.log("Employee removed");

استعلام موظف("محمد", ?وظيفة);  // false - لا يوجد
query employee("Mohamed", ?job);   // false - not found

// ============================================================================
// مثال 6: التقييم الحسابي (Arithmetic Evaluation)
// Example 6: Arithmetic Evaluation
// ============================================================================

اطبع("\n=== مثال 6: التقييم الحسابي ===");
console.log("\n=== Example 6: Arithmetic Evaluation ===");

// حساب المضروب (Factorial)
قاعدة مضروب(0, 1) :- قطع;
rule factorial(0, 1) :- cut;

قاعدة مضروب(?ن, ?نتيجة) :-
  ?ن > 0,
  ?ن1 هو ?ن - 1,
  استعلام مضروب(?ن1, ?نتيجة1),
  ?نتيجة هو ?ن * ?نتيجة1;

rule factorial(?n, ?result) :-
  ?n > 0,
  ?n1 is ?n - 1,
  query factorial(?n1, ?result1),
  ?result is ?n * ?result1;

استعلام مضروب(5, ?نتيجة);  // ?نتيجة = 120
query factorial(5, ?result);   // ?result = 120

// ============================================================================
// مثال 7: مثال متقدم - نظام خبير للتشخيص الطبي
// Example 7: Advanced Example - Medical Diagnosis Expert System
// ============================================================================

اطبع("\n=== مثال 7: نظام خبير للتشخيص الطبي ===");
console.log("\n=== Example 7: Medical Diagnosis Expert System ===");

// الأعراض
// Symptoms
حقيقة عرض("مريض1", "حمى");
fact symptom("patient1", "fever");

حقيقة عرض("مريض1", "سعال");
fact symptom("patient1", "cough");

حقيقة عرض("مريض1", "صداع");
fact symptom("patient1", "headache");

حقيقة عرض("مريض2", "حمى");
fact symptom("patient2", "fever");

حقيقة عرض("مريض2", "طفح_جلدي");
fact symptom("patient2", "rash");

// قواعد التشخيص
// Diagnosis rules
قاعدة تشخيص(?مريض, "إنفلونزا") :-
  استعلام عرض(?مريض, "حمى"),
  استعلام عرض(?مريض, "سعال"),
  استعلام عرض(?مريض, "صداع"),
  قطع;

rule diagnosis(?patient, "flu") :-
  query symptom(?patient, "fever"),
  query symptom(?patient, "cough"),
  query symptom(?patient, "headache"),
  cut;

قاعدة تشخيص(?مريض, "حساسية") :-
  استعلام عرض(?مريض, "حمى"),
  استعلام عرض(?مريض, "طفح_جلدي"),
  قطع;

rule diagnosis(?patient, "allergy") :-
  query symptom(?patient, "fever"),
  query symptom(?patient, "rash"),
  cut;

قاعدة تشخيص(?مريض, "غير_معروف");
rule diagnosis(?patient, "unknown");

// التشخيص
استعلام تشخيص("مريض1", ?مرض);  // ?مرض = "إنفلونزا"
query diagnosis("patient1", ?disease);  // ?disease = "flu"

استعلام تشخيص("مريض2", ?مرض);  // ?مرض = "حساسية"
query diagnosis("patient2", ?disease);  // ?disease = "allergy"

// جمع كل التشخيصات
دع كل_التشخيصات = اجمع_كل(?مرض, استعلام تشخيص(?مريض, ?مرض));
let all_diagnoses = findall(?disease, query diagnosis(?patient, ?disease));

اطبع("كل التشخيصات:", كل_التشخيصات);
console.log("All diagnoses:", all_diagnoses);

// ============================================================================
// مثال 8: مثال متقدم - نظام توصيات ذكي
// Example 8: Advanced Example - Intelligent Recommendation System
// ============================================================================

اطبع("\n=== مثال 8: نظام توصيات ذكي ===");
console.log("\n=== Example 8: Intelligent Recommendation System ===");

// تفضيلات المستخدمين
حقيقة يفضل("أحمد", "أكشن");
fact prefers("Ahmed", "action");

حقيقة يفضل("أحمد", "خيال_علمي");
fact prefers("Ahmed", "scifi");

حقيقة يفضل("سارة", "رومانسي");
fact prefers("Sara", "romance");

حقيقة يفضل("سارة", "دراما");
fact prefers("Sara", "drama");

حقيقة يفضل("علي", "أكشن");
fact prefers("Ali", "action");

// الأفلام وأنواعها
حقيقة فيلم("Inception", "خيال_علمي");
fact movie("Inception", "scifi");

حقيقة فيلم("The Matrix", "خيال_علمي");
fact movie("The Matrix", "scifi");

حقيقة فيلم("Die Hard", "أكشن");
fact movie("Die Hard", "action");

حقيقة فيلم("Titanic", "رومانسي");
fact movie("Titanic", "romance");

// قاعدة التوصية
قاعدة يُوصى_به(?مستخدم, ?فيلم) :-
  استعلام يفضل(?مستخدم, ?نوع),
  استعلام فيلم(?فيلم, ?نوع);

rule recommended(?user, ?movie) :-
  query prefers(?user, ?genre),
  query movie(?movie, ?genre);

// جمع كل التوصيات لأحمد
دع توصيات_أحمد = اجمع_كل(?فيلم, استعلام يُوصى_به("أحمد", ?فيلم));
let ahmeds_recommendations = findall(?movie, query recommended("Ahmed", ?movie));

اطبع("توصيات لأحمد:", توصيات_أحمد);
console.log("Recommendations for Ahmed:", ahmeds_recommendations);
// النتيجة: ["Inception", "The Matrix", "Die Hard"]

اطبع("\n=== انتهت الأمثلة المتقدمة ===");
console.log("\n=== Advanced Examples Completed ===");

