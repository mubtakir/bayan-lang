/**
 * Bayan Advanced Features Examples
 * أمثلة الميزات المتقدمة في لغة البيان
 */

// ============================================
// 1. GENERATORS - المولدات
// ============================================

// English version
function* numberGenerator(max) {
    let current = 0;
    while (current < max) {
        yield current;
        current++;
    }
}

const gen = numberGenerator(5);
console.log(gen.next().value); // 0
console.log(gen.next().value); // 1
console.log(gen.next().value); // 2

// Arabic version
دالة* مولد_الأرقام(الحد_الأقصى) {
    let الحالي = 0;
    بينما (الحالي < الحد_الأقصى) {
        أنتج الحالي;
        الحالي++;
    }
}

const المولد = مولد_الأرقام(5);
console.log(المولد.next().value); // 0

// Generator with delegation
function* delegatingGenerator() {
    yield* [1, 2, 3];
    yield* numberGenerator(3);
}

// Infinite generator
function* fibonacci() {
    let [a, b] = [0, 1];
    while (true) {
        yield a;
        [a, b] = [b, a + b];
    }
}

const fib = fibonacci();
console.log(fib.next().value); // 0
console.log(fib.next().value); // 1
console.log(fib.next().value); // 1
console.log(fib.next().value); // 2
console.log(fib.next().value); // 3

// ============================================
// 2. ENUMS - التعدادات
// ============================================

// English version
enum Color {
    Red = 0,
    Green = 1,
    Blue = 2
}

enum Direction {
    North = "NORTH",
    South = "SOUTH",
    East = "EAST",
    West = "WEST"
}

function setColor(color: Color) {
    match color {
        case Color.Red => console.log("Red selected"),
        case Color.Green => console.log("Green selected"),
        case Color.Blue => console.log("Blue selected"),
        default => console.log("Unknown color")
    }
}

setColor(Color.Red);

// Arabic version
تعداد اللون {
    أحمر = 0,
    أخضر = 1,
    أزرق = 2
}

تعداد الاتجاه {
    شمال = "شمال",
    جنوب = "جنوب",
    شرق = "شرق",
    غرب = "غرب"
}

دالة اضبط_اللون(اللون: اللون) {
    طابق اللون {
        حالة اللون.أحمر => console.log("تم اختيار الأحمر"),
        حالة اللون.أخضر => console.log("تم اختيار الأخضر"),
        حالة اللون.أزرق => console.log("تم اختيار الأزرق"),
        افتراضي => console.log("لون غير معروف")
    }
}

// ============================================
// 3. PATTERN MATCHING - مطابقة الأنماط
// ============================================

// English version
function processValue(value) {
    match value {
        case 0 => "zero",
        case 1 => "one",
        case 2 | 3 => "two or three",
        case x when x > 10 => "greater than 10",
        case [first, ...rest] => `Array starting with ${first}`,
        case {name, age} => `Person: ${name}, ${age}`,
        case _ => "unknown"
    }
}

console.log(processValue(0)); // "zero"
console.log(processValue(15)); // "greater than 10"
console.log(processValue([1, 2, 3])); // "Array starting with 1"
console.log(processValue({name: "Ali", age: 25})); // "Person: Ali, 25"

// Arabic version
دالة عالج_القيمة(القيمة) {
    طابق القيمة {
        حالة 0 => "صفر",
        حالة 1 => "واحد",
        حالة 2 | 3 => "اثنان أو ثلاثة",
        حالة س عندما س > 10 => "أكبر من 10",
        حالة [الأول, ...الباقي] => `مصفوفة تبدأ بـ ${الأول}`,
        حالة {الاسم, العمر} => `شخص: ${الاسم}, ${العمر}`,
        حالة _ => "غير معروف"
    }
}

// Complex pattern matching
function analyzeData(data) {
    match data {
        case {type: "user", name, age} when age >= 18 => 
            `Adult user: ${name}`,
        case {type: "user", name, age} when age < 18 => 
            `Minor user: ${name}`,
        case {type: "admin", permissions: [...perms]} => 
            `Admin with ${perms.length} permissions`,
        case [] => 
            "Empty array",
        case [single] => 
            `Single element: ${single}`,
        case [first, second, ...rest] => 
            `Multiple elements starting with ${first}, ${second}`,
        default => 
            "Unknown data structure"
    }
}

// ============================================
// 4. DECORATORS - المزخرفات
// ============================================

// English version
@log
@validate
class User {
    @readonly
    id: number;
    
    @required
    name: string;
    
    @deprecated("Use getFullName instead")
    getName() {
        return this.name;
    }
    
    @memoize
    getFullName() {
        return `User: ${this.name}`;
    }
}

// Decorator implementations
function log(target) {
    console.log(`Class ${target.name} created`);
    return target;
}

function validate(target) {
    return class extends target {
        constructor(...args) {
            super(...args);
            this.validate();
        }
        
        validate() {
            // Validation logic
        }
    };
}

function readonly(target, key) {
    Object.defineProperty(target, key, {
        writable: false
    });
}

function required(target, key) {
    let value;
    Object.defineProperty(target, key, {
        get() { return value; },
        set(newValue) {
            if (!newValue) {
                throw new Error(`${key} is required`);
            }
            value = newValue;
        }
    });
}

function deprecated(message) {
    return function(target, key, descriptor) {
        const original = descriptor.value;
        descriptor.value = function(...args) {
            console.warn(`Warning: ${message}`);
            return original.apply(this, args);
        };
        return descriptor;
    };
}

function memoize(target, key, descriptor) {
    const cache = new Map();
    const original = descriptor.value;
    
    descriptor.value = function(...args) {
        const cacheKey = JSON.stringify(args);
        if (cache.has(cacheKey)) {
            return cache.get(cacheKey);
        }
        const result = original.apply(this, args);
        cache.set(cacheKey, result);
        return result;
    };
    
    return descriptor;
}

// Arabic version
@سجل
@تحقق
صنف مستخدم {
    @للقراءة_فقط
    المعرف: رقم;
    
    @مطلوب
    الاسم: نص;
    
    @مهمل("استخدم احصل_على_الاسم_الكامل بدلاً من ذلك")
    احصل_على_الاسم() {
        ارجع هذا.الاسم;
    }
}

// ============================================
// 5. TYPE ANNOTATIONS - تعليقات الأنواع
// ============================================

// English version
type Point = {
    x: number,
    y: number
};

type Person = {
    name: string,
    age: number,
    email?: string  // Optional
};

function greet(person: Person): string {
    return `Hello ${person.name}, age ${person.age}`;
}

function add(a: number, b: number): number {
    return a + b;
}

function processArray(arr: number[]): number {
    return arr.reduce((sum, n) => sum + n, 0);
}

// Union types
type StringOrNumber = string | number;

function format(value: StringOrNumber): string {
    if (typeof value === "string") {
        return value.toUpperCase();
    } else {
        return value.toString();
    }
}

// Tuple types
type Coordinate = [number, number, number]; // x, y, z

function distance(point: Coordinate): number {
    const [x, y, z] = point;
    return Math.sqrt(x*x + y*y + z*z);
}

// Arabic version
نوع_بيانات نقطة = {
    س: رقم,
    ص: رقم
};

نوع_بيانات شخص = {
    الاسم: نص,
    العمر: رقم,
    البريد?: نص  // اختياري
};

دالة رحب(الشخص: شخص): نص {
    ارجع `مرحباً ${الشخص.الاسم}, العمر ${الشخص.العمر}`;
}

// ============================================
// 6. NAMED PARAMETERS - المعاملات المسماة
// ============================================

// English version
function createUser(name: string, age: number, email?: string, role: string = "user") {
    return {name, age, email, role};
}

// Call with named parameters
const user1 = createUser(name: "Ali", age: 25);
const user2 = createUser(name: "Sara", age: 30, email: "sara@example.com");
const user3 = createUser(age: 28, name: "Omar", role: "admin"); // Order doesn't matter!

// Arabic version
دالة أنشئ_مستخدم(الاسم: نص, العمر: رقم, البريد?: نص, الدور: نص = "مستخدم") {
    ارجع {الاسم, العمر, البريد, الدور};
}

const مستخدم1 = أنشئ_مستخدم(الاسم: "علي", العمر: 25);
const مستخدم2 = أنشئ_مستخدم(الاسم: "سارة", العمر: 30, البريد: "sara@example.com");

// ============================================
// 7. ADVANCED OPERATORS - عمليات متقدمة
// ============================================

// Optional chaining
const user = {
    profile: {
        address: {
            city: "Cairo"
        }
    }
};

console.log(user?.profile?.address?.city); // "Cairo"
console.log(user?.profile?.phone?.number); // undefined (no error!)

// Nullish coalescing
const value1 = null ?? "default"; // "default"
const value2 = undefined ?? "default"; // "default"
const value3 = 0 ?? "default"; // 0 (not "default"!)
const value4 = "" ?? "default"; // "" (not "default"!)

// Spread operator
const arr1 = [1, 2, 3];
const arr2 = [4, 5, 6];
const combined = [...arr1, ...arr2]; // [1, 2, 3, 4, 5, 6]

const obj1 = {a: 1, b: 2};
const obj2 = {c: 3, d: 4};
const merged = {...obj1, ...obj2}; // {a: 1, b: 2, c: 3, d: 4}

// Rest parameters
function sum(...numbers: number[]): number {
    return numbers.reduce((a, b) => a + b, 0);
}

console.log(sum(1, 2, 3, 4, 5)); // 15

// ============================================
// 8. NAMESPACES - النطاقات
// ============================================

// English version
namespace Math {
    export function add(a: number, b: number): number {
        return a + b;
    }
    
    export function multiply(a: number, b: number): number {
        return a * b;
    }
    
    export const PI = 3.14159;
}

console.log(Math::add(5, 3)); // 8
console.log(Math::PI); // 3.14159

// Arabic version
نطاق رياضيات {
    صدر دالة جمع(أ: رقم, ب: رقم): رقم {
        ارجع أ + ب;
    }
    
    صدر دالة ضرب(أ: رقم, ب: رقم): رقم {
        ارجع أ * ب;
    }
    
    صدر const باي = 3.14159;
}

console.log(رياضيات::جمع(5, 3)); // 8

console.log("✅ All advanced features demonstrated!");
console.log("✅ تم عرض جميع الميزات المتقدمة!");

