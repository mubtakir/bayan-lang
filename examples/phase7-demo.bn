// ============================================
// مثال شامل: المرحلة 7 - التحسينات متوسطة الأولوية
// Comprehensive Example: Phase 7 - Medium Priority Improvements
// ============================================

// ============================================
// 1. نظام الاحتمالات والشك
// Probability and Uncertainty System
// ============================================

import {
  ProbabilityEngine,
  ProbabilisticRule,
  Evidence,
  EvidenceType,
  ProbabilityLevel,
  CombinationMethod
} from '../src/probability/probabilityEngine';

console.log('=== نظام الاحتمالات والشك ===\n');

// إنشاء محرك الاحتمالات
const probEngine = new ProbabilityEngine();

// إضافة حقائق احتمالية
probEngine.addFact('سيمطر غداً', 0.6);
probEngine.addFact('غيوم داكنة', 0.8);
probEngine.addFact('رطوبة عالية', 0.7);

// إضافة أدلة
const evidence1 = new Evidence('توقعات الطقس', EvidenceType.SUPPORTING, 0.9, 'مركز الأرصاد');
const evidence2 = new Evidence('السماء صافية', EvidenceType.CONTRADICTING, 0.3, 'ملاحظة شخصية');

probEngine.addEvidence('سيمطر غداً', evidence1);
probEngine.addEvidence('سيمطر غداً', evidence2);

// عرض الحقيقة بعد إضافة الأدلة
const rainFact = probEngine.getFact('سيمطر غداً');
console.log(`${rainFact.toString()}`);
console.log(`عدد الأدلة: ${rainFact.evidence.length}\n`);

// إضافة قاعدة احتمالية
const premises = new Map();
premises.set('غيوم داكنة', 0.7);
premises.set('رطوبة عالية', 0.6);

const rainRule = new ProbabilisticRule(
  'قاعدة_المطر',
  premises,
  'مطر_محتمل',
  0.85
);

probEngine.addRule(rainRule);

// تطبيق القواعد
const newFacts = probEngine.applyRules();
console.log(`تم استنتاج ${newFacts.length} حقائق جديدة:`);
for (const fact of newFacts) {
  console.log(`  - ${fact.toString()}`);
}

// دمج الاحتمالات
const p1 = 0.7;
const p2 = 0.8;
console.log(`\nدمج احتمالين (${p1}, ${p2}):`);
console.log(`  المتوسط: ${probEngine.combineProbabilities(p1, p2, CombinationMethod.AVERAGE)}`);
console.log(`  بايزي: ${probEngine.combineProbabilities(p1, p2, CombinationMethod.BAYESIAN).toFixed(3)}`);

// الحصول على حقائق عالية الاحتمال
const highProbFacts = probEngine.getFactsAboveThreshold(0.7);
console.log(`\nحقائق فوق 70%:`);
for (const fact of highProbFacts) {
  console.log(`  - ${fact.toString()}`);
}

// إحصائيات
const probStats = probEngine.getStatistics();
console.log(`\nإحصائيات:`);
console.log(`  إجمالي الحقائق: ${probStats.totalFacts}`);
console.log(`  حقائق مؤكدة (>90%): ${probStats.certainFacts}`);
console.log(`  حقائق غير مؤكدة (<50%): ${probStats.uncertainFacts}`);
console.log(`  متوسط الاحتمال: ${(probStats.averageProbability * 100).toFixed(1)}%`);

// ============================================
// 2. نظام الأهداف والتخطيط
// Goals and Planning System
// ============================================

import {
  GoalEngine,
  Goal,
  Action,
  Condition,
  GoalState,
  GoalPriority,
  GoalType
} from '../src/planning/goalEngine';

console.log('\n\n=== نظام الأهداف والتخطيط ===\n');

// إنشاء محرك الأهداف
const goalEngine = new GoalEngine();

// تحديد السياق الأولي
goalEngine.updateContext('مستوى_البرمجة', 1);
goalEngine.updateContext('عدد_المشاريع', 0);
goalEngine.updateContext('لديك_فكرة', true);

// إنشاء هدف رئيسي
const mainGoal = new Goal(
  'أن أصبح مبرمجاً محترفاً',
  'الوصول لمستوى احترافي في البرمجة',
  GoalType.ACHIEVEMENT,
  GoalPriority.CRITICAL,
  [new Condition('مستوى_البرمجة', '>=', 10)]
);

// إضافة أهداف فرعية
const subgoal1 = new Goal(
  'تعلم الأساسيات',
  'إتقان أساسيات البرمجة',
  GoalType.ACHIEVEMENT,
  GoalPriority.HIGH,
  [new Condition('مستوى_البرمجة', '>=', 3)]
);

const subgoal2 = new Goal(
  'بناء مشاريع',
  'بناء 5 مشاريع على الأقل',
  GoalType.ACHIEVEMENT,
  GoalPriority.HIGH,
  [new Condition('عدد_المشاريع', '>=', 5)]
);

const subgoal3 = new Goal(
  'المساهمة في مشاريع مفتوحة',
  'المساهمة في مشاريع مفتوحة المصدر',
  GoalType.ACHIEVEMENT,
  GoalPriority.MEDIUM,
  [new Condition('مستوى_البرمجة', '>=', 7)]
);

mainGoal.addSubgoal(subgoal1);
mainGoal.addSubgoal(subgoal2);
mainGoal.addSubgoal(subgoal3);

goalEngine.addGoal(mainGoal);
goalEngine.addGoal(subgoal1);
goalEngine.addGoal(subgoal2);
goalEngine.addGoal(subgoal3);

// بدء الأهداف
mainGoal.start();
subgoal1.start();

console.log('الأهداف:');
console.log(`  ${mainGoal.toString()}`);
console.log(`    ${subgoal1.toString()}`);
console.log(`    ${subgoal2.toString()}`);
console.log(`    ${subgoal3.toString()}`);

// إنشاء إجراءات
const action1 = new Action(
  'دراسة دورة',
  'دراسة دورة برمجة',
  [new Condition('مستوى_البرمجة', '<', 10)],
  new Map([['مستوى_البرمجة', 3]]),
  5
);

const action2 = new Action(
  'بناء مشروع',
  'بناء مشروع جديد',
  [
    new Condition('لديك_فكرة', '==', true),
    new Condition('مستوى_البرمجة', '>=', 2)
  ],
  new Map([['عدد_المشاريع', 1]]),
  10
);

goalEngine.addAction(action1);
goalEngine.addAction(action2);

// التخطيط لتحقيق هدف
const plan = goalEngine.planForGoal('تعلم الأساسيات');
if (plan) {
  console.log(`\n${plan.toString()}`);
}

// محاكاة التقدم
console.log('\n--- محاكاة التقدم ---');
goalEngine.updateContext('مستوى_البرمجة', 3);
let achieved = goalEngine.checkGoals();
console.log(`تم تحقيق ${achieved.length} هدف`);

mainGoal.updateProgress();
console.log(`تقدم الهدف الرئيسي: ${mainGoal.progress.toFixed(0)}%`);

goalEngine.updateContext('عدد_المشاريع', 5);
achieved = goalEngine.checkGoals();
console.log(`تم تحقيق ${achieved.length} هدف إضافي`);

mainGoal.updateProgress();
console.log(`تقدم الهدف الرئيسي: ${mainGoal.progress.toFixed(0)}%`);

// إحصائيات
const goalStats = goalEngine.getStatistics();
console.log(`\nإحصائيات الأهداف:`);
console.log(`  إجمالي: ${goalStats.totalGoals}`);
console.log(`  معلقة: ${goalStats.pending}`);
console.log(`  قيد التنفيذ: ${goalStats.inProgress}`);
console.log(`  محققة: ${goalStats.achieved}`);

// ============================================
// 3. نظام تحسينات الأداء
// Performance Improvements System
// ============================================

import {
  PerformanceEngine,
  Cache
} from '../src/performance/performanceEngine';

console.log('\n\n=== نظام تحسينات الأداء ===\n');

// إنشاء محرك الأداء
const perfEngine = new PerformanceEngine(100, 5000); // cache size=100, TTL=5s

// 1. التخزين المؤقت
console.log('--- التخزين المؤقت ---');

let callCount = 0;
const expensiveCalculation = (n: number) => {
  callCount++;
  console.log(`  حساب فيبوناتشي(${n})... [استدعاء #${callCount}]`);
  
  if (n <= 1) return n;
  let a = 0, b = 1;
  for (let i = 2; i <= n; i++) {
    const temp = a + b;
    a = b;
    b = temp;
  }
  return b;
};

// أول استدعاء - سيتم الحساب
const result1 = perfEngine.withCache('fib_10', () => expensiveCalculation(10));
console.log(`  النتيجة: ${result1}`);

// ثاني استدعاء - من التخزين المؤقت
const result2 = perfEngine.withCache('fib_10', () => expensiveCalculation(10));
console.log(`  النتيجة: ${result2}`);

console.log(`عدد الاستدعاءات الفعلية: ${callCount} (يجب أن يكون 1)`);

// 2. قياس الأداء
console.log('\n--- قياس الأداء ---');

perfEngine.withBenchmark('حساب_مجموع', () => {
  let sum = 0;
  for (let i = 0; i < 1000000; i++) {
    sum += i;
  }
  return sum;
});

perfEngine.withBenchmark('حساب_مجموع', () => {
  let sum = 0;
  for (let i = 0; i < 1000000; i++) {
    sum += i;
  }
  return sum;
});

const benchStats = perfEngine.benchmark.getStatistics('حساب_مجموع');
if (benchStats) {
  console.log(`عدد القياسات: ${benchStats.count}`);
  console.log(`الأسرع: ${benchStats.min.toFixed(2)}ms`);
  console.log(`الأبطأ: ${benchStats.max.toFixed(2)}ms`);
  console.log(`المتوسط: ${benchStats.average.toFixed(2)}ms`);
}

// 3. الفهرسة
console.log('\n--- الفهرسة ---');

const users = [
  { id: 1, name: 'أحمد', age: 25, city: 'الرياض' },
  { id: 2, name: 'محمد', age: 30, city: 'جدة' },
  { id: 3, name: 'علي', age: 25, city: 'الرياض' },
  { id: 4, name: 'فاطمة', age: 28, city: 'جدة' }
];

perfEngine.index.createIndex('age');
perfEngine.index.createIndex('city');

for (const user of users) {
  perfEngine.index.add(user, 'age', user.age);
  perfEngine.index.add(user, 'city', user.city);
}

const age25 = perfEngine.index.find('age', 25);
console.log(`المستخدمون بعمر 25: ${age25.length}`);
for (const user of age25) {
  console.log(`  - ${user.name}`);
}

const riyadh = perfEngine.index.find('city', 'الرياض');
console.log(`المستخدمون في الرياض: ${riyadh.length}`);
for (const user of riyadh) {
  console.log(`  - ${user.name}`);
}

// إحصائيات شاملة
console.log('\n--- الإحصائيات الشاملة ---');
const overallStats = perfEngine.getOverallStatistics();
console.log(`حجم التخزين المؤقت: ${overallStats.cache.size}/${overallStats.cache.maxSize}`);
console.log(`إجمالي الاستخدامات: ${overallStats.cache.totalHits}`);
console.log(`عدد القياسات: ${overallStats.benchmarks.size}`);

// ============================================
// النهاية - End
// ============================================

console.log('\n\n🎉 انتهى مثال المرحلة 7!');
console.log('تم عرض:');
console.log('✅ نظام الاحتمالات والشك');
console.log('✅ نظام الأهداف والتخطيط');
console.log('✅ نظام تحسينات الأداء');

