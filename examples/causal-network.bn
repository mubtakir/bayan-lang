// ============================================
// شبكة سببية متقدمة - مثال الاعتداء والعواقب
// Advanced Causal Network - Assault and Consequences Example
// ============================================

// ============================================
// المرحلة 1: العلاقات السببية الأساسية
// Phase 1: Basic Causal Relations
// ============================================

// تعريف العلاقات السببية مع الأوزان
// Define causal relations with weights

حقيقة يسبب("اعتداء", "غضب", 0.9);
fact causes("assault", "anger", 0.9);

حقيقة يسبب("غضب", "تصرف_خاطئ", 0.7);
fact causes("anger", "wrong_action", 0.7);

حقيقة يسبب("تصرف_خاطئ", "كوارث", 0.6);
fact causes("wrong_action", "disasters", 0.6);

حقيقة يسبب("كوارث", "تدمير_البلد", 0.8);
fact causes("disasters", "country_destruction", 0.8);

// ============================================
// المرحلة 2: أنواع العلاقات المتعددة
// Phase 2: Multiple Relation Types
// ============================================

// علاقات الوقاية والمنع
// Prevention relations

حقيقة يمنع("صبر", "غضب", 0.8);
fact prevents("patience", "anger", 0.8);

حقيقة يمنع("تعليم", "تصرف_خاطئ", 0.75);
fact prevents("education", "wrong_action", 0.75);

حقيقة يمنع("وعي", "كوارث", 0.7);
fact prevents("awareness", "disasters", 0.7);

// علاقات التعزيز
// Enhancement relations

حقيقة يعزز("تربية_صالحة", "صبر", 0.85);
fact enhances("good_upbringing", "patience", 0.85);

حقيقة يعزز("ثقافة", "وعي", 0.9);
fact enhances("culture", "awareness", 0.9);

// علاقات الإضعاف
// Weakening relations

حقيقة يضعف("جهل", "وعي", 0.8);
fact weakens("ignorance", "awareness", 0.8);

حقيقة يضعف("فقر", "تعليم", 0.7);
fact weakens("poverty", "education", 0.7);

// ============================================
// المرحلة 3: القواعد المنطقية للعلاقات السببية
// Phase 3: Logical Rules for Causal Relations
// ============================================

// قاعدة: إذا X يسبب Y، وY يسبب Z، فإن X يسبب Z بشكل غير مباشر
// Rule: If X causes Y, and Y causes Z, then X indirectly causes Z

قاعدة يسبب_بشكل_غير_مباشر(?س, ?ص, ?وزن) :-
  يسبب(?س, ?ص, ?وزن);

rule causes_indirectly(?x, ?y, ?weight) :-
  causes(?x, ?y, ?weight);

قاعدة يسبب_بشكل_غير_مباشر(?س, ?ص, ?وزن) :-
  يسبب(?س, ?ع, ?وزن1),
  يسبب_بشكل_غير_مباشر(?ع, ?ص, ?وزن2),
  ?وزن هو ?وزن1 * ?وزن2;

rule causes_indirectly(?x, ?y, ?weight) :-
  causes(?x, ?z, ?weight1),
  causes_indirectly(?z, ?y, ?weight2),
  ?weight is ?weight1 * ?weight2;

// قاعدة: إذا X يسبب Y، وZ يمنع Y، فإن Z يمنع تأثير X
// Rule: If X causes Y, and Z prevents Y, then Z prevents the effect of X

قاعدة يمنع_تأثير(?ع, ?س, ?ص) :-
  يسبب(?س, ?ص, ?),
  يمنع(?ع, ?ص, ?);

rule prevents_effect(?z, ?x, ?y) :-
  causes(?x, ?y, ?),
  prevents(?z, ?y, ?);

// قاعدة: السبب الجذري هو ما ليس له سبب آخر
// Rule: Root cause is what has no other cause

قاعدة سبب_جذري(?س) :-
  يسبب(?س, ?, ?),
  ليس يسبب(?, ?س, ?);

rule root_cause(?x) :-
  causes(?x, ?, ?),
  not causes(?, ?x, ?);

// قاعدة: النتيجة النهائية هي ما لا تسبب شيئاً آخر
// Rule: Final result is what doesn't cause anything else

قاعدة نتيجة_نهائية(?ص) :-
  يسبب(?, ?ص, ?),
  ليس يسبب(?ص, ?, ?);

rule final_result(?y) :-
  causes(?, ?y, ?),
  not causes(?y, ?, ?);

// ============================================
// المرحلة 4: الاستعلامات والتحليل
// Phase 4: Queries and Analysis
// ============================================

اطبع("\n=== تحليل الشبكة السببية ===");
print("\n=== Causal Network Analysis ===");

// 1. هل الاعتداء يؤدي إلى تدمير البلد؟
// Does assault lead to country destruction?

اطبع("\n1. هل الاعتداء يؤدي إلى تدمير البلد؟");
print("1. Does assault lead to country destruction?");

دع نتيجة1 = استعلام يسبب_بشكل_غير_مباشر("اعتداء", "تدمير_البلد", ?وزن);
let result1 = query causes_indirectly("assault", "country_destruction", ?weight);

إذا (نتيجة1.طول > 0) {
  اطبع("نعم! الوزن الكلي: " + نتيجة1[0].احصل("وزن"));
} وإلا {
  اطبع("لا");
}

if (result1.length > 0) {
  print("Yes! Total weight: " + result1[0].get("weight"));
} else {
  print("No");
}

// 2. ما هي جميع النتائج المحتملة للاعتداء؟
// What are all possible results of assault?

اطبع("\n2. جميع النتائج المحتملة للاعتداء:");
print("2. All possible results of assault:");

دع نتائج = اجمع_كل(?نتيجة, استعلام يسبب_بشكل_غير_مباشر("اعتداء", ?نتيجة, ?));
let results = findall(?result, query causes_indirectly("assault", ?result, ?));

لكل (دع نتيجة في نتائج) {
  اطبع("  - " + نتيجة);
}

for (let result of results) {
  print("  - " + result);
}

// 3. ما هي الأسباب الجذرية في الشبكة؟
// What are the root causes in the network?

اطبع("\n3. الأسباب الجذرية:");
print("3. Root causes:");

دع أسباب_جذرية = اجمع_كل(?سبب, استعلام سبب_جذري(?سبب));
let root_causes = findall(?cause, query root_cause(?cause));

لكل (دع سبب في أسباب_جذرية) {
  اطبع("  - " + سبب);
}

for (let cause of root_causes) {
  print("  - " + cause);
}

// 4. ما هي النتائج النهائية في الشبكة؟
// What are the final results in the network?

اطبع("\n4. النتائج النهائية:");
print("4. Final results:");

دع نتائج_نهائية = اجمع_كل(?نتيجة, استعلام نتيجة_نهائية(?نتيجة));
let final_results = findall(?result, query final_result(?result));

لكل (دع نتيجة في نتائج_نهائية) {
  اطبع("  - " + نتيجة);
}

for (let result of final_results) {
  print("  - " + result);
}

// 5. ما الذي يمنع الغضب؟
// What prevents anger?

اطبع("\n5. ما الذي يمنع الغضب؟");
print("5. What prevents anger?");

دع موانع = اجمع_كل(?مانع, استعلام يمنع(?مانع, "غضب", ?));
let preventers = findall(?preventer, query prevents(?preventer, "anger", ?));

لكل (دع مانع في موانع) {
  اطبع("  - " + مانع);
}

for (let preventer of preventers) {
  print("  - " + preventer);
}

// 6. ما الذي يعزز الصبر؟
// What enhances patience?

اطبع("\n6. ما الذي يعزز الصبر؟");
print("6. What enhances patience?");

دع معززات = اجمع_كل(?معزز, استعلام يعزز(?معزز, "صبر", ?));
let enhancers = findall(?enhancer, query enhances(?enhancer, "patience", ?));

لكل (دع معزز في معززات) {
  اطبع("  - " + معزز);
}

for (let enhancer of enhancers) {
  print("  - " + enhancer);
}

// ============================================
// المرحلة 5: تحليل متقدم
// Phase 5: Advanced Analysis
// ============================================

اطبع("\n=== تحليل متقدم ===");
print("\n=== Advanced Analysis ===");

// حساب الوزن الكلي لسلسلة الاعتداء → تدمير البلد
// Calculate total weight for assault → country_destruction chain

اطبع("\n7. حساب الوزن الكلي للسلسلة:");
print("7. Calculate total weight for the chain:");

دع وزن_اعتداء_غضب = 0.9;
دع وزن_غضب_تصرف = 0.7;
دع وزن_تصرف_كوارث = 0.6;
دع وزن_كوارث_تدمير = 0.8;

let weight_assault_anger = 0.9;
let weight_anger_action = 0.7;
let weight_action_disasters = 0.6;
let weight_disasters_destruction = 0.8;

دع وزن_كلي = وزن_اعتداء_غضب * وزن_غضب_تصرف * وزن_تصرف_كوارث * وزن_كوارث_تدمير;
let total_weight = weight_assault_anger * weight_anger_action * weight_action_disasters * weight_disasters_destruction;

اطبع("اعتداء → غضب → تصرف_خاطئ → كوارث → تدمير_البلد");
اطبع("الوزن الكلي: " + وزن_كلي.toFixed(3) + " (" + (وزن_كلي * 100).toFixed(1) + "%)");

print("assault → anger → wrong_action → disasters → country_destruction");
print("Total weight: " + total_weight.toFixed(3) + " (" + (total_weight * 100).toFixed(1) + "%)");

اطبع("\n=== انتهى التحليل ===\n");
print("\n=== Analysis Complete ===\n");

// ============================================
// الميزات المتقدمة - Advanced Features
// ============================================

اطبع("\n=== الميزات المتقدمة / Advanced Features ===\n");
print("\n=== Advanced Features ===\n");

// 1. اكتشاف الحلقات السببية - Cycle Detection
اطبع("\n1. اكتشاف الحلقات السببية:");
print("1. Cycle Detection:");

// إضافة حلقة للاختبار - Add a cycle for testing
حقيقة يسبب("تدمير_البلد", "فقر", 0.7);
fact causes("country_destruction", "poverty", 0.7);

// الآن لدينا حلقة: فقر → جهل → كوارث → تدمير_البلد → فقر
اطبع("   تم إضافة علاقة: تدمير_البلد → فقر (0.7)");
اطبع("   الآن لدينا حلقة: فقر → جهل → كوارث → تدمير_البلد → فقر");
print("   Added relation: country_destruction → poverty (0.7)");
print("   Now we have a cycle: poverty → ignorance → disasters → country_destruction → poverty");

// 2. نقاط التدخل - Intervention Points
اطبع("\n2. نقاط التدخل (أين نتدخل لكسر السلسلة؟):");
print("2. Intervention Points (where to intervene to break the chain?):");

// العقد التي تظهر في مسارات متعددة هي نقاط تدخل مهمة
قاعدة نقطة_تدخل(?نقطة) :-
  يسبب_بشكل_غير_مباشر("اعتداء", ?نقطة, ?),
  يسبب_بشكل_غير_مباشر(?نقطة, "تدمير_البلد", ?),
  ?نقطة != "اعتداء",
  ?نقطة != "تدمير_البلد";

rule intervention_point(?point) :-
  causes_indirectly("assault", ?point, ?),
  causes_indirectly(?point, "country_destruction", ?),
  ?point != "assault",
  ?point != "country_destruction";

دع نقاط = اجمع_كل(?نقطة, استعلام نقطة_تدخل(?نقطة));
اطبع("   نقاط التدخل المهمة: " + نقاط);

let points = findall(?point, query intervention_point(?point));
print("   Important intervention points: " + points);

// 3. محاكاة "ماذا لو" - What-If Simulation
اطبع("\n3. محاكاة 'ماذا لو' (ماذا لو منعنا الغضب؟):");
print("3. What-If Simulation (what if we prevent anger?):");

// قاعدة: المسارات التي لا تمر بالغضب
قاعدة مسار_بدون_غضب(?من, ?إلى) :-
  يسبب_بشكل_غير_مباشر(?من, ?إلى, ?),
  ليس (يسبب_بشكل_غير_مباشر(?من, "غضب", ?), يسبب_بشكل_غير_مباشر("غضب", ?إلى, ?));

rule path_without_anger(?from, ?to) :-
  causes_indirectly(?from, ?to, ?),
  not (causes_indirectly(?from, "anger", ?), causes_indirectly("anger", ?to, ?));

دع مسارات_بديلة = اجمع_كل(?إلى, استعلام مسار_بدون_غضب("اعتداء", ?إلى));
اطبع("   المسارات البديلة من الاعتداء (بدون غضب): " + مسارات_بديلة);

let alternative_paths = findall(?to, query path_without_anger("assault", ?to));
print("   Alternative paths from assault (without anger): " + alternative_paths);

// 4. تحليل الأهمية - Importance Analysis
اطبع("\n4. تحليل أهمية العقد:");
print("4. Node Importance Analysis:");

// قاعدة: حساب درجة الأهمية (عدد العلاقات الصادرة × 2 + الواردة)
قاعدة درجة_أهمية(?عقدة, ?درجة) :-
  اجمع_كل(?إلى, استعلام يسبب(?عقدة, ?إلى, ?), ?صادرة),
  اجمع_كل(?من, استعلام يسبب(?من, ?عقدة, ?), ?واردة),
  ?عدد_صادرة هو طول(?صادرة),
  ?عدد_واردة هو طول(?واردة),
  ?درجة هو (?عدد_صادرة * 2) + ?عدد_واردة;

rule importance_score(?node, ?score) :-
  findall(?to, query causes(?node, ?to, ?), ?outgoing),
  findall(?from, query causes(?from, ?node, ?), ?incoming),
  ?out_count is length(?outgoing),
  ?in_count is length(?incoming),
  ?score is (?out_count * 2) + ?in_count;

// عرض أهمية بعض العقد
دع أهمية_كوارث = استعلام درجة_أهمية("كوارث", ?درجة);
اطبع("   أهمية 'كوارث': " + أهمية_كوارث[0].احصل("درجة"));

let disasters_importance = query importance_score("disasters", ?score);
print("   Importance of 'disasters': " + disasters_importance[0].get("score"));

// 5. المسافة السببية - Causal Distance
اطبع("\n5. المسافة السببية (عدد الخطوات):");
print("5. Causal Distance (number of steps):");

// قاعدة: حساب المسافة
قاعدة مسافة(?من, ?إلى, 1) :-
  يسبب(?من, ?إلى, ?);

قاعدة مسافة(?من, ?إلى, ?م) :-
  يسبب(?من, ?وسيط, ?),
  مسافة(?وسيط, ?إلى, ?م_وسيطة),
  ?م هو ?م_وسيطة + 1,
  ?م < 10; // منع التكرار اللانهائي

rule distance(?from, ?to, 1) :-
  causes(?from, ?to, ?);

rule distance(?from, ?to, ?d) :-
  causes(?from, ?intermediate, ?),
  distance(?intermediate, ?to, ?intermediate_d),
  ?d is ?intermediate_d + 1,
  ?d < 10; // prevent infinite recursion

دع مسافة_اعتداء_تدمير = استعلام مسافة("اعتداء", "تدمير_البلد", ?م);
اطبع("   المسافة من 'اعتداء' إلى 'تدمير_البلد': " + مسافة_اعتداء_تدمير[0].احصل("م") + " خطوات");

let assault_destruction_dist = query distance("assault", "country_destruction", ?d);
print("   Distance from 'assault' to 'country_destruction': " + assault_destruction_dist[0].get("d") + " steps");

// 6. العقد القريبة - Nearby Nodes
اطبع("\n6. العقد القريبة (ضمن مسافة 2):");
print("6. Nearby Nodes (within distance 2):");

قاعدة قريب_من(?عقدة, ?قريب, ?مسافة) :-
  مسافة(?عقدة, ?قريب, ?مسافة),
  ?مسافة <= 2;

rule near(?node, ?nearby, ?distance) :-
  distance(?node, ?nearby, ?distance),
  ?distance <= 2;

دع قريبة_من_اعتداء = اجمع_كل([?قريب, ?م], استعلام قريب_من("اعتداء", ?قريب, ?م));
اطبع("   العقد القريبة من 'اعتداء': " + قريبة_من_اعتداء);

let near_assault = findall([?nearby, ?d], query near("assault", ?nearby, ?d));
print("   Nodes near 'assault': " + near_assault);

اطبع("\n=== انتهت الميزات المتقدمة ===\n");
print("\n=== Advanced Features Complete ===\n");

