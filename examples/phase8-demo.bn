/**
 * أمثلة المرحلة 8 - Phase 8 Examples
 * 
 * أمثلة عملية للأنظمة منخفضة الأولوية
 */

// ============================================
// 1. واجهة REST API
// ============================================

استيراد { RestAPIEngine, RequestMethod, ResponseStatus } من './src/api/restAPI';

// إنشاء محرك API
دع api = جديد RestAPIEngine();

// إنشاء مفتاح API
دع apiKey = api.createAPIKey(
  'تطبيقي',                    // الاسم
  ['*'],                       // جميع الصلاحيات
  100,                         // 100 طلب في الدقيقة
  7 * 24 * 60 * 60 * 1000     // ينتهي بعد أسبوع
);

اطبع('مفتاح API:', apiKey.key);

// إرسال طلب منطقي
دع طلب_منطقي = {
  method: RequestMethod.POST,
  endpoint: '/logic/query',
  headers: جديد Map([
    ['Authorization', `Bearer ${apiKey.key}`]
  ]),
  body: {
    query: 'إنسان(سقراط)'
  },
  timestamp: Date.now()
};

دع استجابة = انتظر api.handleRequest(طلب_منطقي);

إذا (استجابة.status === ResponseStatus.SUCCESS) {
  اطبع('نجح الاستعلام:', استجابة.data);
}

// إرسال طلب تحليل لغوي
دع طلب_لغوي = {
  method: RequestMethod.POST,
  endpoint: '/linguistics/analyze',
  headers: جديد Map([
    ['Authorization', `Bearer ${apiKey.key}`]
  ]),
  body: {
    word: 'شجرة'
  },
  timestamp: Date.now()
};

دع تحليل = انتظر api.handleRequest(طلب_لغوي);
اطبع('تحليل كلمة شجرة:', تحليل.data);

// الحصول على إحصائيات API
دع إحصائيات_api = api.getStatistics();
اطبع('إحصائيات API:', إحصائيات_api);

// ============================================
// 2. أدوات التطوير
// ============================================

استيراد { DevToolsEngine } من './src/devtools/devTools';

// إنشاء محرك أدوات التطوير
دع devTools = جديد DevToolsEngine();

// --- المنقح (Debugger) ---

// إضافة نقاط توقف
devTools.debugger.addBreakpoint('main.bn', 10);
devTools.debugger.addBreakpoint('utils.bn', 25, 'x > 100');

// محاكاة مكدس الاستدعاءات
devTools.debugger.pushFrame('main', 'main.bn', 1);
devTools.debugger.pushFrame('processData', 'main.bn', 10);
devTools.debugger.pushFrame('validateInput', 'utils.bn', 25);

// طباعة المكدس
devTools.debugger.printCallStack();

// الإحصائيات
دع إحصائيات_منقح = devTools.debugger.getStatistics();
اطبع('نقاط التوقف:', إحصائيات_منقح.totalBreakpoints);
اطبع('عمق المكدس:', إحصائيات_منقح.stackDepth);

// --- قياس الأداء (Profiler) ---

// قياس دالة
دع نتيجة = devTools.profiler.measure('حساب_فيبوناتشي', () => {
  دالة فيبوناتشي(ن) {
    إذا (ن <= 1) أرجع ن;
    أرجع فيبوناتشي(ن - 1) + فيبوناتشي(ن - 2);
  }
  أرجع فيبوناتشي(20);
});

اطبع('نتيجة فيبوناتشي:', نتيجة);

// قياس عدة مرات
لكل (دع i = 0; i < 5; i++) {
  devTools.profiler.measure('عملية_بسيطة', () => {
    دع مجموع = 0;
    لكل (دع j = 0; j < 1000; j++) {
      مجموع += j;
    }
    أرجع مجموع;
  });
}

// الحصول على إحصائيات
دع إحصائيات_أداء = devTools.profiler.getStatistics('عملية_بسيطة');
اطبع('عدد المرات:', إحصائيات_أداء.calls);
اطبع('المتوسط:', إحصائيات_أداء.average, 'ms');
اطبع('الأدنى:', إحصائيات_أداء.min, 'ms');
اطبع('الأقصى:', إحصائيات_أداء.max, 'ms');

// طباعة تقرير شامل
devTools.profiler.printReport();

// --- منسق الكود (Code Formatter) ---

دع كود_غير_منسق = `
دالة اختبار() {
اطبع('مرحباً');
إذا (صحيح) {
أرجع 42;
}
}
`;

دع كود_منسق = devTools.formatter.format(كود_غير_منسق);
اطبع('الكود المنسق:');
اطبع(كود_منسق);

// --- REPL تفاعلي ---

// تقييم تعبيرات
دع نتيجة1 = devTools.repl.eval('2 + 2');
اطبع('2 + 2 =', نتيجة1);

دع نتيجة2 = devTools.repl.eval('Math.sqrt(16)');
اطبع('جذر 16 =', نتيجة2);

// السجل
دع سجل = devTools.repl.getHistory();
اطبع('سجل REPL:', سجل);

// ============================================
// 3. الميزات المتقدمة
// ============================================

استيراد { 
  AdvancedFeaturesEngine, 
  Event, 
  EventType,
  NotificationLevel,
  LogLevel 
} من './src/advanced/advancedFeatures';

// إنشاء محرك الميزات المتقدمة
دع features = جديد AdvancedFeaturesEngine();

// --- محرك الأحداث (Event Engine) ---

// الاستماع لحدث معين
features.events.on('user-login', (event) => {
  اطبع('مستخدم دخل:', event.data.username);
  اطبع('الوقت:', جديد Date(event.timestamp));
});

// الاستماع لجميع الأحداث
features.events.on('*', (event) => {
  اطبع('حدث:', event.name, '- نوع:', event.type);
});

// إطلاق أحداث
features.events.emit(جديد Event(
  EventType.USER,
  'user-login',
  { username: 'أحمد', role: 'admin' }
));

features.events.emit(جديد Event(
  EventType.SYSTEM,
  'system-startup',
  { version: '1.0.0' }
));

features.events.emit(جديد Event(
  EventType.INFO,
  'data-processed',
  { records: 1000 }
));

// سجل الأحداث
دع سجل_أحداث = features.events.getHistory();
اطبع('إجمالي الأحداث:', سجل_أحداث.length);

// آخر 5 أحداث
دع آخر_أحداث = features.events.getHistory(undefined, 5);
اطبع('آخر 5 أحداث:', آخر_أحداث);

// إحصائيات الأحداث
دع إحصائيات_أحداث = features.events.getStatistics();
اطبع('إحصائيات الأحداث:', إحصائيات_أحداث);

// --- محرك الإشعارات (Notification Engine) ---

// إنشاء إشعارات
features.notifications.notify(
  NotificationLevel.INFO,
  'مرحباً',
  'تم تسجيل الدخول بنجاح'
);

features.notifications.notify(
  NotificationLevel.SUCCESS,
  'نجاح',
  'تم حفظ البيانات بنجاح'
);

features.notifications.notify(
  NotificationLevel.WARNING,
  'تحذير',
  'مساحة القرص منخفضة'
);

features.notifications.notify(
  NotificationLevel.ERROR,
  'خطأ',
  'فشل الاتصال بقاعدة البيانات'
);

// الحصول على جميع الإشعارات
دع جميع_الإشعارات = features.notifications.getNotifications();
اطبع('إجمالي الإشعارات:', جميع_الإشعارات.length);

// الحصول على الإشعارات غير المقروءة
دع غير_مقروء = features.notifications.getNotifications(true);
اطبع('إشعارات غير مقروءة:', غير_مقروء.length);

// تحديد الكل كمقروء
features.notifications.markAllAsRead();

// إحصائيات الإشعارات
دع إحصائيات_إشعارات = features.notifications.getStatistics();
اطبع('إحصائيات الإشعارات:', إحصائيات_إشعارات);

// --- محرك التسجيل (Logging Engine) ---

// تسجيل رسائل بمستويات مختلفة
features.logging.debug('رسالة تنقيح - للمطورين فقط');
features.logging.info('رسالة معلومات - عملية عادية');
features.logging.warn('رسالة تحذير - انتبه!');
features.logging.error('رسالة خطأ - حدث خطأ!');

// تسجيل مع بيانات إضافية
features.logging.info('طلب HTTP', {
  method: 'GET',
  url: '/api/users',
  status: 200
});

// تسجيل مع مصدر
features.logging.error('خطأ في قاعدة البيانات', {
  error: 'Connection timeout',
  table: 'users'
}, 'DatabaseService');

// تعيين المستوى الأدنى
features.logging.setMinLevel(LogLevel.WARN);
اطبع('تم تعيين المستوى الأدنى إلى WARN');

// الآن فقط WARN و ERROR سيتم تسجيلهم
features.logging.debug('لن يظهر');
features.logging.info('لن يظهر أيضاً');
features.logging.warn('سيظهر!');
features.logging.error('سيظهر أيضاً!');

// الحصول على السجلات
دع جميع_السجلات = features.logging.getLogs();
اطبع('إجمالي السجلات:', جميع_السجلات.length);

// الحصول على الأخطاء فقط
دع أخطاء = features.logging.getLogs(LogLevel.ERROR);
اطبع('عدد الأخطاء:', أخطاء.length);

// آخر 10 سجلات
دع آخر_سجلات = features.logging.getLogs(undefined, 10);
اطبع('آخر 10 سجلات:', آخر_سجلات);

// إحصائيات السجلات
دع إحصائيات_سجلات = features.logging.getStatistics();
اطبع('إحصائيات السجلات:', إحصائيات_سجلات);

// --- محرك التكوين (Configuration Engine) ---

// تعيين قيم التكوين
features.config.set('app.name', 'البيان');
features.config.set('app.version', '1.0.0');
features.config.set('app.language', 'ar');

features.config.set('database.host', 'localhost');
features.config.set('database.port', 5432);
features.config.set('database.name', 'bayan_db');

features.config.set('api.timeout', 5000);
features.config.set('api.retries', 3);

// الحصول على قيم
دع اسم_التطبيق = features.config.get('app.name');
دع منفذ_قاعدة_البيانات = features.config.get('database.port');

اطبع('اسم التطبيق:', اسم_التطبيق);
اطبع('منفذ قاعدة البيانات:', منفذ_قاعدة_البيانات);

// قيم افتراضية
features.config.setDefault('cache.enabled', true);
features.config.setDefault('cache.ttl', 3600);
features.config.setDefault('logging.level', 'info');

// إذا لم يتم تعيين القيمة، سيتم استخدام الافتراضية
دع cache_enabled = features.config.get('cache.enabled');
اطبع('التخزين المؤقت مفعل:', cache_enabled);

// تحميل من كائن
features.config.load({
  'feature.notifications': true,
  'feature.analytics': false,
  'max.connections': 100,
  'max.upload.size': 10485760  // 10 MB
});

// تصدير إلى كائن
دع تكوين_كامل = features.config.export();
اطبع('التكوين الكامل:', تكوين_كامل);

// جميع المفاتيح
دع مفاتيح = features.config.keys();
اطبع('جميع مفاتيح التكوين:', مفاتيح);

// --- الإحصائيات الشاملة ---

دع إحصائيات_شاملة = features.getOverallStatistics();

اطبع('\n=== الإحصائيات الشاملة ===');
اطبع('الأحداث:', إحصائيات_شاملة.events);
اطبع('الإشعارات:', إحصائيات_شاملة.notifications);
اطبع('السجلات:', إحصائيات_شاملة.logging);
اطبع('التكوين:', إحصائيات_شاملة.config);

// ============================================
// 4. مثال متكامل: نظام مراقبة
// ============================================

اطبع('\n=== نظام المراقبة المتكامل ===');

// إعداد نظام مراقبة شامل
دع monitor = جديد AdvancedFeaturesEngine();

// تسجيل جميع الأحداث
monitor.events.on('*', (event) => {
  monitor.logging.info(`حدث: ${event.name}`, event.data);
});

// إشعار عند الأخطاء
monitor.events.on('error', (event) => {
  monitor.notifications.notify(
    NotificationLevel.ERROR,
    'خطأ في النظام',
    event.data.message
  );
});

// إشعار عند التحذيرات
monitor.events.on('warning', (event) => {
  monitor.notifications.notify(
    NotificationLevel.WARNING,
    'تحذير',
    event.data.message
  );
});

// محاكاة أحداث النظام
monitor.events.emit(جديد Event(EventType.SYSTEM, 'startup', { version: '1.0.0' }));
monitor.events.emit(جديد Event(EventType.INFO, 'user-action', { action: 'login' }));
monitor.events.emit(جديد Event(EventType.WARNING, 'warning', { message: 'ذاكرة منخفضة' }));
monitor.events.emit(جديد Event(EventType.ERROR, 'error', { message: 'فشل الاتصال' }));

// الإحصائيات النهائية
دع إحصائيات_نهائية = monitor.getOverallStatistics();
اطبع('الإحصائيات النهائية:', إحصائيات_نهائية);

اطبع('\n✅ انتهت أمثلة المرحلة 8!');

