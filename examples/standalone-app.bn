// Standalone Application Example - مثال تطبيق مستقل
// This example shows how to create a complete application
// that can be compiled to an executable file

// هذا المثال يوضح كيفية إنشاء تطبيق كامل
// يمكن تحويله إلى ملف تنفيذي

// ============================================
// Bilingual Task Manager - مدير المهام ثنائي اللغة
// ============================================

class Task {
    constructor(id, title, completed) {
        this.id = id;
        this.title = title;
        this.completed = completed || false;
    }
    
    toggle() {
        this.completed = !this.completed;
    }
    
    display() {
        const status = this.completed ? "✅" : "⬜";
        console.log(`${status} [${this.id}] ${this.title}`);
    }
}

صنف مهمة {
    منشئ(المعرف, العنوان, مكتملة) {
        هذا.المعرف = المعرف;
        هذا.العنوان = العنوان;
        هذا.مكتملة = مكتملة || false;
    }
    
    دالة تبديل() {
        هذا.مكتملة = !هذا.مكتملة;
    }
    
    دالة عرض() {
        const حالة = هذا.مكتملة ? "✅" : "⬜";
        console.log(`${حالة} [${هذا.المعرف}] ${هذا.العنوان}`);
    }
}

class TaskManager {
    constructor() {
        this.tasks = [];
        this.nextId = 1;
    }
    
    addTask(title) {
        const task = new Task(this.nextId, title, false);
        this.tasks.push(task);
        this.nextId = this.nextId + 1;
        console.log(`✅ Task added: ${title}`);
        return task;
    }
    
    removeTask(id) {
        const index = this.findTaskIndex(id);
        if (index >= 0) {
            const task = this.tasks[index];
            this.tasks.splice(index, 1);
            console.log(`🗑️  Task removed: ${task.title}`);
            return true;
        }
        console.log(`❌ Task not found: ${id}`);
        return false;
    }
    
    toggleTask(id) {
        const task = this.findTask(id);
        if (task) {
            task.toggle();
            const status = task.completed ? "completed" : "pending";
            console.log(`🔄 Task ${id} marked as ${status}`);
            return true;
        }
        console.log(`❌ Task not found: ${id}`);
        return false;
    }
    
    listTasks() {
        if (this.tasks.length === 0) {
            console.log("📝 No tasks yet. Add some tasks to get started!");
            return;
        }
        
        console.log("\n📋 Task List:");
        console.log("─".repeat(50));
        
        let i = 0;
        while (i < this.tasks.length) {
            this.tasks[i].display();
            i = i + 1;
        }
        
        console.log("─".repeat(50));
        console.log(`Total: ${this.tasks.length} tasks`);
    }
    
    findTask(id) {
        let i = 0;
        while (i < this.tasks.length) {
            if (this.tasks[i].id === id) {
                return this.tasks[i];
            }
            i = i + 1;
        }
        return null;
    }
    
    findTaskIndex(id) {
        let i = 0;
        while (i < this.tasks.length) {
            if (this.tasks[i].id === id) {
                return i;
            }
            i = i + 1;
        }
        return -1;
    }
}

صنف مدير_المهام {
    منشئ() {
        هذا.المهام = [];
        هذا.المعرف_التالي = 1;
    }
    
    دالة أضف_مهمة(العنوان) {
        const مهمة = new مهمة(هذا.المعرف_التالي, العنوان, false);
        هذا.المهام.push(مهمة);
        هذا.المعرف_التالي = هذا.المعرف_التالي + 1;
        console.log(`✅ تمت إضافة المهمة: ${العنوان}`);
        return مهمة;
    }
    
    دالة احذف_مهمة(المعرف) {
        let i = 0;
        while (i < هذا.المهام.length) {
            if (هذا.المهام[i].المعرف === المعرف) {
                const مهمة = هذا.المهام[i];
                هذا.المهام.splice(i, 1);
                console.log(`🗑️  تم حذف المهمة: ${مهمة.العنوان}`);
                return true;
            }
            i = i + 1;
        }
        console.log(`❌ المهمة غير موجودة: ${المعرف}`);
        return false;
    }
    
    دالة اعرض_المهام() {
        if (هذا.المهام.length === 0) {
            console.log("📝 لا توجد مهام بعد. أضف بعض المهام للبدء!");
            return;
        }
        
        console.log("\n📋 قائمة المهام:");
        console.log("─".repeat(50));
        
        let i = 0;
        while (i < هذا.المهام.length) {
            هذا.المهام[i].عرض();
            i = i + 1;
        }
        
        console.log("─".repeat(50));
        console.log(`الإجمالي: ${هذا.المهام.length} مهمة`);
    }
}

// ============================================
// Main Application - التطبيق الرئيسي
// ============================================

function printHeader() {
    console.log("\n" + "=".repeat(60));
    console.log("🌍 Bayan Task Manager - مدير المهام البيان");
    console.log("   Bilingual Demo Application");
    console.log("=".repeat(60) + "\n");
}

دالة اطبع_الترويسة() {
    console.log("\n" + "=".repeat(60));
    console.log("🌍 مدير المهام البيان - Bayan Task Manager");
    console.log("   تطبيق تجريبي ثنائي اللغة");
    console.log("=".repeat(60) + "\n");
}

function runDemo() {
    printHeader();
    
    console.log("📌 Demo 1: English Task Manager\n");
    
    const manager = new TaskManager();
    
    manager.addTask("Learn Bayan programming language");
    manager.addTask("Build a bilingual application");
    manager.addTask("Create executable file");
    
    manager.listTasks();
    
    console.log("\n🔄 Completing task 1...");
    manager.toggleTask(1);
    
    console.log("\n🔄 Completing task 2...");
    manager.toggleTask(2);
    
    manager.listTasks();
    
    console.log("\n🗑️  Removing task 3...");
    manager.removeTask(3);
    
    manager.listTasks();
}

دالة شغل_العرض() {
    اطبع_الترويسة();
    
    console.log("📌 عرض توضيحي: مدير المهام العربي\n");
    
    const مدير = new مدير_المهام();
    
    مدير.أضف_مهمة("تعلم لغة البيان");
    مدير.أضف_مهمة("بناء تطبيق ثنائي اللغة");
    مدير.أضف_مهمة("إنشاء ملف تنفيذي");
    
    مدير.اعرض_المهام();
    
    console.log("\n🗑️  حذف المهمة 2...");
    مدير.احذف_مهمة(2);
    
    مدير.اعرض_المهام();
}

// ============================================
// Run the application - شغل التطبيق
// ============================================

console.log("\n🚀 Starting Bayan Standalone Application Demo...\n");

// Run English demo
runDemo();

console.log("\n" + "─".repeat(60) + "\n");

// Run Arabic demo - شغل العرض العربي
شغل_العرض();

console.log("\n" + "=".repeat(60));
console.log("✅ Demo completed successfully!");
console.log("✅ اكتمل العرض بنجاح!");
console.log("=".repeat(60) + "\n");

console.log("📦 To create an executable from this file:");
console.log("   1. bayan compile standalone-app.bn -o standalone-app.js");
console.log("   2. pkg standalone-app.js --targets node18-linux-x64");
console.log("   3. ./standalone-app\n");

console.log("📦 لإنشاء ملف تنفيذي من هذا الملف:");
console.log("   1. bayan compile standalone-app.bn -o standalone-app.js");
console.log("   2. pkg standalone-app.js --targets node18-linux-x64");
console.log("   3. ./standalone-app\n");

