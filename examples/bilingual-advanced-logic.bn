/**
 * مثال متقدم: الجمع بين البرمجة المنطقية والإجرائية والكائنية
 * Advanced Example: Combining Logic, Procedural, and OOP
 * 
 * هذا المثال يوضح القوة الفريدة للغة البيان في الجمع بين ثلاثة أنماط برمجية
 * This example demonstrates Bayan's unique power in combining three paradigms
 */

// ============================================================================
// الجزء 1: البرمجة الكائنية - تعريف الكلاسات
// Part 1: Object-Oriented Programming - Class Definitions
// ============================================================================

صنف طالب {
  اسم: نص;
  عمر: رقم;
  تخصص: نص;
  درجات: رقم[];

  بناء(اسم: نص, عمر: رقم, تخصص: نص) {
    هذا.اسم = اسم;
    هذا.عمر = عمر;
    هذا.تخصص = تخصص;
    هذا.درجات = [];
  }

  أضف_درجة(درجة: رقم) {
    هذا.درجات.أضف(درجة);
  }

  متوسط_الدرجات(): رقم {
    إذا (هذا.درجات.طول === 0) {
      أرجع 0;
    }
    دع مجموع = 0;
    لكل (دع درجة من هذا.درجات) {
      مجموع += درجة;
    }
    أرجع مجموع / هذا.درجات.طول;
  }
}

class Student {
  name: string;
  age: number;
  major: string;
  grades: number[];

  constructor(name: string, age: number, major: string) {
    this.name = name;
    this.age = age;
    this.major = major;
    this.grades = [];
  }

  addGrade(grade: number) {
    this.grades.push(grade);
  }

  averageGrade(): number {
    if (this.grades.length === 0) {
      return 0;
    }
    let sum = 0;
    for (let grade of this.grades) {
      sum += grade;
    }
    return sum / this.grades.length;
  }
}

// ============================================================================
// الجزء 2: البرمجة المنطقية - قواعد الاستنتاج
// Part 2: Logic Programming - Inference Rules
// ============================================================================

// تعريف الحقائق عن الطلاب
// Define facts about students
حقيقة طالب("أحمد", "حاسب", 85);
fact student("Ahmed", "CS", 85);

حقيقة طالب("سارة", "حاسب", 92);
fact student("Sara", "CS", 92);

حقيقة طالب("علي", "رياضيات", 78);
fact student("Ali", "Math", 78);

حقيقة طالب("فاطمة", "فيزياء", 88);
fact student("Fatima", "Physics", 88);

حقيقة طالب("محمد", "حاسب", 95);
fact student("Mohamed", "CS", 95);

// قواعد التصنيف
// Classification rules
قاعدة ممتاز(?اسم) :-
  استعلام طالب(?اسم, ?تخصص, ?درجة),
  ?درجة >= 90,
  قطع;

rule excellent(?name) :-
  query student(?name, ?major, ?grade),
  ?grade >= 90,
  cut;

قاعدة جيد_جداً(?اسم) :-
  استعلام طالب(?اسم, ?تخصص, ?درجة),
  ?درجة >= 80,
  ?درجة < 90,
  قطع;

rule very_good(?name) :-
  query student(?name, ?major, ?grade),
  ?grade >= 80,
  ?grade < 90,
  cut;

قاعدة جيد(?اسم) :-
  استعلام طالب(?اسم, ?تخصص, ?درجة),
  ?درجة >= 70,
  ?درجة < 80;

rule good(?name) :-
  query student(?name, ?major, ?grade),
  ?grade >= 70,
  ?grade < 80;

// قاعدة: طالب متفوق في تخصص معين
قاعدة متفوق_في(?اسم, ?تخصص) :-
  استعلام طالب(?اسم, ?تخصص, ?درجة),
  ?درجة >= 85;

rule top_in(?name, ?major) :-
  query student(?name, ?major, ?grade),
  ?grade >= 85;

// ============================================================================
// الجزء 3: البرمجة الإجرائية - معالجة البيانات
// Part 3: Procedural Programming - Data Processing
// ============================================================================

دالة عرض_تقرير_طالب(اسم: نص) {
  اطبع("\n=== تقرير الطالب ===");
  console.log("\n=== Student Report ===");
  
  // استخدام البرمجة المنطقية للاستعلام
  // Using logic programming for queries
  دع نتائج = اجمع_كل(?درجة, استعلام طالب(اسم, ?تخصص, ?درجة));
  
  إذا (نتائج.طول > 0) {
    اطبع("الاسم:", اسم);
    console.log("Name:", اسم);
    
    اطبع("الدرجة:", نتائج[0]);
    console.log("Grade:", نتائج[0]);
    
    // استخدام القواعد المنطقية
    // Using logic rules
    إذا (استعلام ممتاز(اسم)) {
      اطبع("التقدير: ممتاز");
      console.log("Rating: Excellent");
    } وإلا_إذا (استعلام جيد_جداً(اسم)) {
      اطبع("التقدير: جيد جداً");
      console.log("Rating: Very Good");
    } وإلا {
      اطبع("التقدير: جيد");
      console.log("Rating: Good");
    }
  } وإلا {
    اطبع("الطالب غير موجود");
    console.log("Student not found");
  }
}

function displayStudentReport(name: string) {
  console.log("\n=== Student Report ===");
  
  let results = findall(?grade, query student(name, ?major, ?grade));
  
  if (results.length > 0) {
    console.log("Name:", name);
    console.log("Grade:", results[0]);
    
    if (query excellent(name)) {
      console.log("Rating: Excellent");
    } else if (query very_good(name)) {
      console.log("Rating: Very Good");
    } else {
      console.log("Rating: Good");
    }
  } else {
    console.log("Student not found");
  }
}

// ============================================================================
// الجزء 4: الدمج الكامل - استخدام الأنماط الثلاثة معاً
// Part 4: Full Integration - Using All Three Paradigms Together
// ============================================================================

اطبع("=== نظام إدارة الطلاب المتقدم ===");
console.log("=== Advanced Student Management System ===");

// 1. إنشاء كائنات طلاب (OOP)
// 1. Create student objects (OOP)
دع أحمد = جديد طالب("أحمد", 20, "حاسب");
let ahmed = new Student("Ahmed", 20, "CS");

أحمد.أضف_درجة(85);
ahmed.addGrade(85);

أحمد.أضف_درجة(90);
ahmed.addGrade(90);

أحمد.أضف_درجة(88);
ahmed.addGrade(88);

// 2. استخدام البرمجة الإجرائية للمعالجة
// 2. Use procedural programming for processing
دالة تحليل_الطلاب() {
  اطبع("\n--- تحليل الطلاب ---");
  console.log("\n--- Student Analysis ---");
  
  // 3. استخدام البرمجة المنطقية للاستعلامات المعقدة
  // 3. Use logic programming for complex queries
  
  // جمع كل الطلاب الممتازين
  دع الممتازون = اجمع_كل(?اسم, استعلام ممتاز(?اسم));
  اطبع("الطلاب الممتازون:", الممتازون);
  console.log("Excellent students:", الممتازون);
  
  // جمع كل طلاب الحاسب
  دع طلاب_حاسب = اجمع_كل(?اسم, استعلام طالب(?اسم, "حاسب", ?درجة));
  اطبع("طلاب الحاسب:", طلاب_حاسب);
  console.log("CS students:", طلاب_حاسب);
  
  // جمع كل المتفوقين في الحاسب
  دع متفوقو_حاسب = اجمع_كل(?اسم, استعلام متفوق_في(?اسم, "حاسب"));
  اطبع("المتفوقون في الحاسب:", متفوقو_حاسب);
  console.log("Top CS students:", متفوقو_حاسب);
  
  // استخدام النفي كفشل
  // Using negation as failure
  اطبع("\nالطلاب غير الممتازين:");
  console.log("\nNon-excellent students:");
  
  دع كل_الطلاب = اجمع_كل(?اسم, استعلام طالب(?اسم, ?تخصص, ?درجة));
  لكل (دع طالب من كل_الطلاب) {
    إذا (ليس استعلام ممتاز(طالب)) {
      اطبع("  -", طالب);
      console.log("  -", طالب);
    }
  }
}

function analyzeStudents() {
  console.log("\n--- Student Analysis ---");
  
  let excellent = findall(?name, query excellent(?name));
  console.log("Excellent students:", excellent);
  
  let csStudents = findall(?name, query student(?name, "CS", ?grade));
  console.log("CS students:", csStudents);
  
  let topCS = findall(?name, query top_in(?name, "CS"));
  console.log("Top CS students:", topCS);
  
  console.log("\nNon-excellent students:");
  let allStudents = findall(?name, query student(?name, ?major, ?grade));
  for (let student of allStudents) {
    if (not query excellent(student)) {
      console.log("  -", student);
    }
  }
}

// تشغيل التحليل
تحليل_الطلاب();
analyzeStudents();

// ============================================================================
// الجزء 5: التعديل الديناميكي مع OOP
// Part 5: Dynamic Modification with OOP
// ============================================================================

اطبع("\n=== التعديل الديناميكي ===");
console.log("\n=== Dynamic Modification ===");

// إضافة طالب جديد ديناميكياً
أضف طالب("ليلى", "حاسب", 97);
assert student("Layla", "CS", 97);

اطبع("تم إضافة طالبة جديدة: ليلى");
console.log("New student added: Layla");

// التحقق من التصنيف
إذا (استعلام ممتاز("ليلى")) {
  اطبع("ليلى طالبة ممتازة!");
  console.log("Layla is an excellent student!");
}

// تحديث قائمة المتفوقين
دع متفوقو_حاسب_محدث = اجمع_كل(?اسم, استعلام متفوق_في(?اسم, "حاسب"));
اطبع("المتفوقون في الحاسب (محدث):", متفوقو_حاسب_محدث);
console.log("Top CS students (updated):", متفوقو_حاسب_محدث);

// ============================================================================
// الجزء 6: مثال متقدم - نظام توصيات ذكي
// Part 6: Advanced Example - Intelligent Recommendation System
// ============================================================================

اطبع("\n=== نظام التوصيات الذكي ===");
console.log("\n=== Intelligent Recommendation System ===");

// تعريف المقررات والمتطلبات
حقيقة مقرر("خوارزميات", "حاسب", "متقدم");
fact course("Algorithms", "CS", "advanced");

حقيقة مقرر("قواعد_بيانات", "حاسب", "متوسط");
fact course("Databases", "CS", "intermediate");

حقيقة مقرر("ذكاء_اصطناعي", "حاسب", "متقدم");
fact course("AI", "CS", "advanced");

حقيقة مقرر("تفاضل", "رياضيات", "أساسي");
fact course("Calculus", "Math", "basic");

// قاعدة التوصية بالمقررات
قاعدة يُوصى_بمقرر(?طالب, ?مقرر) :-
  استعلام طالب(?طالب, ?تخصص, ?درجة),
  استعلام مقرر(?مقرر, ?تخصص, ?مستوى),
  ?درجة >= 85,
  ?مستوى === "متقدم";

rule recommended_course(?student, ?course) :-
  query student(?student, ?major, ?grade),
  query course(?course, ?major, ?level),
  ?grade >= 85,
  ?level === "advanced";

قاعدة يُوصى_بمقرر(?طالب, ?مقرر) :-
  استعلام طالب(?طالب, ?تخصص, ?درجة),
  استعلام مقرر(?مقرر, ?تخصص, "متوسط");

rule recommended_course(?student, ?course) :-
  query student(?student, ?major, ?grade),
  query course(?course, ?major, "intermediate");

// توليد التوصيات
دالة توصيات_للطالب(اسم: نص) {
  اطبع("\nالمقررات الموصى بها لـ", اسم + ":");
  console.log("\nRecommended courses for", اسم + ":");
  
  دع توصيات = مجموعة_من(?مقرر, استعلام يُوصى_بمقرر(اسم, ?مقرر));
  
  لكل (دع مقرر من توصيات) {
    اطبع("  ✓", مقرر);
    console.log("  ✓", مقرر);
  }
}

function recommendationsFor(name: string) {
  console.log("\nRecommended courses for", name + ":");
  
  let recommendations = setof(?course, query recommended_course(name, ?course));
  
  for (let course of recommendations) {
    console.log("  ✓", course);
  }
}

توصيات_للطالب("أحمد");
recommendationsFor("Ahmed");

توصيات_للطالب("سارة");
recommendationsFor("Sara");

توصيات_للطالب("علي");
recommendationsFor("Ali");

اطبع("\n=== انتهى المثال المتقدم ===");
console.log("\n=== Advanced Example Completed ===");

اطبع("\nهذا المثال يوضح القوة الفريدة للغة البيان:");
console.log("\nThis example demonstrates Bayan's unique power:");

اطبع("✓ الجمع بين OOP والبرمجة المنطقية والإجرائية");
console.log("✓ Combining OOP, Logic, and Procedural programming");

اطبع("✓ استخدام اللغتين العربية والإنجليزية معاً");
console.log("✓ Using both Arabic and English together");

اطبع("✓ ميزات منطقية متقدمة تفوق Prolog");
console.log("✓ Advanced logic features surpassing Prolog");

اطبع("✓ تكامل سلس بين الأنماط الثلاثة");
console.log("✓ Seamless integration of all three paradigms");

