// 🎨 Advanced Graphics & Animation Example - مثال الرسوميات والحركة المتقدمة
// This example demonstrates Bayan's graphics capabilities
// هذا المثال يوضح قدرات البيان في الرسوميات

// ============================================
// English Version - النسخة الإنجليزية
// ============================================

// Particle System Class
class Particle {
    constructor(x, y, color) {
        this.x = x;
        this.y = y;
        this.vx = (Math.random() - 0.5) * 5;
        this.vy = (Math.random() - 0.5) * 5;
        this.color = color;
        this.size = Math.random() * 5 + 2;
        this.life = 1.0;
        this.decay = Math.random() * 0.02 + 0.01;
    }
    
    update() {
        this.x = this.x + this.vx;
        this.y = this.y + this.vy;
        this.vy = this.vy + 0.1; // Gravity
        this.life = this.life - this.decay;
        return this.life > 0;
    }
    
    draw(ctx) {
        ctx.globalAlpha = this.life;
        ctx.fillStyle = this.color;
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
        ctx.fill();
    }
}

// Graphics Engine Class
class GraphicsEngine {
    constructor(canvasId) {
        this.canvas = document.getElementById(canvasId);
        this.ctx = this.canvas.getContext('2d');
        this.particles = [];
        this.shapes = [];
        this.animationId = null;
        
        // Set canvas size
        this.resize();
        window.addEventListener('resize', () => this.resize());
        
        // Mouse interaction
        this.canvas.addEventListener('click', (e) => this.createExplosion(e));
    }
    
    resize() {
        this.canvas.width = window.innerWidth;
        this.canvas.height = window.innerHeight;
    }
    
    createExplosion(event) {
        const rect = this.canvas.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;
        
        const colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#FFA07A', '#98D8C8'];
        
        for (let i = 0; i < 50; i++) {
            const color = colors[Math.floor(Math.random() * colors.length)];
            this.particles.push(new Particle(x, y, color));
        }
    }
    
    addShape(shape) {
        this.shapes.push(shape);
    }
    
    update() {
        // Update particles
        this.particles = this.particles.filter(p => p.update());
        
        // Update shapes
        for (let shape of this.shapes) {
            if (shape.update) {
                shape.update();
            }
        }
    }
    
    draw() {
        // Clear canvas with fade effect
        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
        
        // Draw shapes
        for (let shape of this.shapes) {
            shape.draw(this.ctx);
        }
        
        // Draw particles
        for (let particle of this.particles) {
            particle.draw(this.ctx);
        }
        
        this.ctx.globalAlpha = 1.0;
    }
    
    animate() {
        this.update();
        this.draw();
        this.animationId = requestAnimationFrame(() => this.animate());
    }
    
    start() {
        this.animate();
    }
    
    stop() {
        if (this.animationId) {
            cancelAnimationFrame(this.animationId);
        }
    }
}

// Animated Circle Shape
class AnimatedCircle {
    constructor(x, y, radius, color) {
        this.x = x;
        this.y = y;
        this.radius = radius;
        this.color = color;
        this.angle = 0;
        this.speed = 0.02;
    }
    
    update() {
        this.angle = this.angle + this.speed;
        this.x = this.x + Math.cos(this.angle) * 2;
        this.y = this.y + Math.sin(this.angle) * 2;
        
        // Bounce off edges
        if (this.x < this.radius || this.x > window.innerWidth - this.radius) {
            this.speed = -this.speed;
        }
    }
    
    draw(ctx) {
        ctx.fillStyle = this.color;
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
        ctx.fill();
        
        // Glow effect
        ctx.shadowBlur = 20;
        ctx.shadowColor = this.color;
        ctx.fill();
        ctx.shadowBlur = 0;
    }
}

// Wave Pattern Generator
function* waveGenerator(amplitude, frequency, phase) {
    let t = phase;
    while (true) {
        yield amplitude * Math.sin(frequency * t);
        t = t + 0.1;
    }
}

// Initialize graphics engine
const engine = new GraphicsEngine('graphicsCanvas');

// Add animated shapes
for (let i = 0; i < 5; i++) {
    const x = Math.random() * window.innerWidth;
    const y = Math.random() * window.innerHeight;
    const radius = Math.random() * 30 + 10;
    const colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#FFA07A', '#98D8C8'];
    const color = colors[i % colors.length];
    
    engine.addShape(new AnimatedCircle(x, y, radius, color));
}

// Start animation
engine.start();

// ============================================
// Arabic Version - النسخة العربية
// ============================================

// صنف الجسيم
صنف جسيم {
    منشئ(س, ص, اللون) {
        هذا.س = س;
        هذا.ص = ص;
        هذا.سرعة_س = (Math.random() - 0.5) * 5;
        هذا.سرعة_ص = (Math.random() - 0.5) * 5;
        هذا.اللون = اللون;
        هذا.الحجم = Math.random() * 5 + 2;
        هذا.الحياة = 1.0;
        هذا.التلاشي = Math.random() * 0.02 + 0.01;
    }
    
    دالة حدث() {
        هذا.س = هذا.س + هذا.سرعة_س;
        هذا.ص = هذا.ص + هذا.سرعة_ص;
        هذا.سرعة_ص = هذا.سرعة_ص + 0.1; // الجاذبية
        هذا.الحياة = هذا.الحياة - هذا.التلاشي;
        ارجع هذا.الحياة > 0;
    }
    
    دالة ارسم(السياق) {
        السياق.globalAlpha = هذا.الحياة;
        السياق.fillStyle = هذا.اللون;
        السياق.beginPath();
        السياق.arc(هذا.س, هذا.ص, هذا.الحجم, 0, Math.PI * 2);
        السياق.fill();
    }
}

// صنف محرك الرسوميات
صنف محرك_رسوميات {
    منشئ(معرف_اللوحة) {
        هذا.اللوحة = document.getElementById(معرف_اللوحة);
        هذا.السياق = هذا.اللوحة.getContext('2d');
        هذا.الجسيمات = [];
        هذا.الأشكال = [];
        هذا.معرف_الحركة = لاشيء;
        
        هذا.غير_الحجم();
        window.addEventListener('resize', () => هذا.غير_الحجم());
        
        هذا.اللوحة.addEventListener('click', (حدث) => هذا.أنشئ_انفجار(حدث));
    }
    
    دالة غير_الحجم() {
        هذا.اللوحة.width = window.innerWidth;
        هذا.اللوحة.height = window.innerHeight;
    }
    
    دالة أنشئ_انفجار(الحدث) {
        const المستطيل = هذا.اللوحة.getBoundingClientRect();
        const س = الحدث.clientX - المستطيل.left;
        const ص = الحدث.clientY - المستطيل.top;
        
        const الألوان = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#FFA07A', '#98D8C8'];
        
        لكل (let ع = 0; ع < 50; ع++) {
            const اللون = الألوان[Math.floor(Math.random() * الألوان.length)];
            هذا.الجسيمات.push(جديد جسيم(س, ص, اللون));
        }
    }
    
    دالة أضف_شكل(الشكل) {
        هذا.الأشكال.push(الشكل);
    }
    
    دالة حدث() {
        هذا.الجسيمات = هذا.الجسيمات.filter(ج => ج.حدث());
        
        لكل (let شكل of هذا.الأشكال) {
            إذا (شكل.حدث) {
                شكل.حدث();
            }
        }
    }
    
    دالة ارسم() {
        هذا.السياق.fillStyle = 'rgba(0, 0, 0, 0.1)';
        هذا.السياق.fillRect(0, 0, هذا.اللوحة.width, هذا.اللوحة.height);
        
        لكل (let شكل of هذا.الأشكال) {
            شكل.ارسم(هذا.السياق);
        }
        
        لكل (let جسيم of هذا.الجسيمات) {
            جسيم.ارسم(هذا.السياق);
        }
        
        هذا.السياق.globalAlpha = 1.0;
    }
    
    دالة حرك() {
        هذا.حدث();
        هذا.ارسم();
        هذا.معرف_الحركة = requestAnimationFrame(() => هذا.حرك());
    }
    
    دالة ابدأ() {
        هذا.حرك();
    }
}

