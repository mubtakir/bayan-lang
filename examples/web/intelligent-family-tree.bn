// 🌳 Intelligent Family Tree - شجرة العائلة الذكية
// This example showcases Bayan's unique hybrid paradigm:
// - Logic Programming for family relationships
// - OOP for UI components
// - Procedural for DOM manipulation
// هذا المثال يعرض النمط الهجين الفريد للبيان:
// - البرمجة المنطقية لعلاقات العائلة
// - البرمجة الكائنية لمكونات الواجهة
// - البرمجة الإجرائية للتعامل مع DOM

hybrid {
    // ==========================================
    // PART 1: Logic Programming - البرمجة المنطقية
    // Define family relationships using facts and rules
    // ==========================================
    
    // Facts: Parent relationships - الحقائق: علاقات الأبوة
    fact parent("أحمد", "فاطمة");
    fact parent("أحمد", "علي");
    fact parent("أحمد", "سارة");
    fact parent("فاطمة", "عمر");
    fact parent("فاطمة", "ليلى");
    fact parent("علي", "خالد");
    fact parent("علي", "نور");
    fact parent("سارة", "زينب");
    
    fact parent("Ahmed", "Fatima");
    fact parent("Ahmed", "Ali");
    fact parent("Ahmed", "Sara");
    fact parent("Fatima", "Omar");
    fact parent("Fatima", "Layla");
    fact parent("Ali", "Khaled");
    fact parent("Ali", "Noor");
    fact parent("Sara", "Zainab");
    
    // Facts: Gender - الحقائق: الجنس
    fact male("أحمد");
    fact male("علي");
    fact male("عمر");
    fact male("خالد");
    fact female("فاطمة");
    fact female("سارة");
    fact female("ليلى");
    fact female("نور");
    fact female("زينب");
    
    fact male("Ahmed");
    fact male("Ali");
    fact male("Omar");
    fact male("Khaled");
    fact female("Fatima");
    fact female("Sara");
    fact female("Layla");
    fact female("Noor");
    fact female("Zainab");
    
    // Rules: Complex family relationships - القواعد: العلاقات العائلية المعقدة
    
    // Grandparent - الجد/الجدة
    rule grandparent(?gp, ?gc) :- parent(?gp, ?p), parent(?p, ?gc);
    
    // Grandfather - الجد
    rule grandfather(?gf, ?gc) :- grandparent(?gf, ?gc), male(?gf);
    
    // Grandmother - الجدة
    rule grandmother(?gm, ?gc) :- grandparent(?gm, ?gc), female(?gm);
    
    // Sibling - الأخ/الأخت
    rule sibling(?x, ?y) :- parent(?p, ?x), parent(?p, ?y), ?x != ?y;
    
    // Brother - الأخ
    rule brother(?b, ?s) :- sibling(?b, ?s), male(?b);
    
    // Sister - الأخت
    rule sister(?s, ?b) :- sibling(?s, ?b), female(?s);
    
    // Uncle - العم/الخال
    rule uncle(?u, ?n) :- parent(?p, ?n), brother(?u, ?p);
    
    // Aunt - العمة/الخالة
    rule aunt(?a, ?n) :- parent(?p, ?n), sister(?a, ?p);
    
    // Cousin - ابن/بنت العم أو الخال
    rule cousin(?c1, ?c2) :- parent(?p1, ?c1), parent(?p2, ?c2), sibling(?p1, ?p2);
    
    // Ancestor - السلف
    rule ancestor(?a, ?d) :- parent(?a, ?d);
    rule ancestor(?a, ?d) :- parent(?a, ?x), ancestor(?x, ?d);
    
    // Descendant - الخلف
    rule descendant(?d, ?a) :- ancestor(?a, ?d);
    
    // ==========================================
    // PART 2: OOP - Person Class - البرمجة الكائنية
    // ==========================================
    
    class Person {
        constructor(name, arabicName) {
            this.name = name;
            this.arabicName = arabicName;
            this.relationships = {};
        }
        
        // Find all relationships for this person
        findRelationships() {
            const rels = {};
            
            // Children - الأبناء
            rels.children = this.queryLogic("parent", this.name, "?child");
            rels.childrenAr = this.queryLogic("parent", this.arabicName, "?child");
            
            // Parents - الآباء
            rels.parents = this.queryLogic("parent", "?parent", this.name);
            rels.parentsAr = this.queryLogic("parent", "?parent", this.arabicName);
            
            // Grandchildren - الأحفاد
            rels.grandchildren = this.queryLogic("grandparent", this.name, "?gc");
            rels.grandchildrenAr = this.queryLogic("grandparent", this.arabicName, "?gc");
            
            // Grandparents - الأجداد
            rels.grandparents = this.queryLogic("grandparent", "?gp", this.name);
            rels.grandparentsAr = this.queryLogic("grandparent", "?gp", this.arabicName);
            
            // Siblings - الإخوة
            rels.siblings = this.queryLogic("sibling", this.name, "?sib");
            rels.siblingsAr = this.queryLogic("sibling", this.arabicName, "?sib");
            
            // Uncles - الأعمام/الأخوال
            rels.uncles = this.queryLogic("uncle", "?uncle", this.name);
            rels.unclesAr = this.queryLogic("uncle", "?uncle", this.arabicName);
            
            // Aunts - العمات/الخالات
            rels.aunts = this.queryLogic("aunt", "?aunt", this.name);
            rels.auntsAr = this.queryLogic("aunt", "?aunt", this.arabicName);
            
            // Cousins - أبناء العم/الخال
            rels.cousins = this.queryLogic("cousin", this.name, "?cousin");
            rels.cousinsAr = this.queryLogic("cousin", this.arabicName, "?cousin");
            
            // Ancestors - الأسلاف
            rels.ancestors = this.queryLogic("ancestor", "?anc", this.name);
            rels.ancestorsAr = this.queryLogic("ancestor", "?anc", this.arabicName);
            
            // Descendants - الأخلاف
            rels.descendants = this.queryLogic("descendant", "?desc", this.name);
            rels.descendantsAr = this.queryLogic("descendant", "?desc", this.arabicName);
            
            this.relationships = rels;
            return rels;
        }
        
        // Helper to query logic engine
        queryLogic(ruleName, arg1, arg2) {
            // This will be implemented by the logic engine
            // In real implementation, this calls the Bayan logic engine
            return [];
        }
        
        // Get relationship description
        getRelationshipText(relType, lang) {
            const count = lang === "ar" ? 
                (this.relationships[relType + "Ar"] || []).length :
                (this.relationships[relType] || []).length;
            
            if (count === 0) {
                return lang === "ar" ? "لا يوجد" : "None";
            }
            
            const names = lang === "ar" ?
                (this.relationships[relType + "Ar"] || []) :
                (this.relationships[relType] || []);
            
            return names.join(", ");
        }
    }
    
    // ==========================================
    // PART 3: UI Component Class - صنف مكون الواجهة
    // ==========================================
    
    صنف مكون_شجرة_العائلة {
        منشئ(عنصر_الحاوية) {
            هذا.الحاوية = عنصر_الحاوية;
            هذا.الأشخاص = new Map();
            هذا.الشخص_المختار = null;
            هذا.اللغة = "ar";
        }
        
        دالة أضف_شخص(name, arabicName) {
            const person = new Person(name, arabicName);
            person.findRelationships();
            هذا.الأشخاص.set(name, person);
            هذا.الأشخاص.set(arabicName, person);
            return person;
        }
        
        دالة اختر_شخص(name) {
            هذا.الشخص_المختار = هذا.الأشخاص.get(name);
            if (هذا.الشخص_المختار) {
                هذا.اعرض_التفاصيل();
            }
        }
        
        دالة بدل_اللغة() {
            هذا.اللغة = هذا.اللغة === "ar" ? "en" : "ar";
            if (هذا.الشخص_المختار) {
                هذا.اعرض_التفاصيل();
            }
        }
        
        دالة اعرض_التفاصيل() {
            const person = هذا.الشخص_المختار;
            const lang = هذا.اللغة;
            const displayName = lang === "ar" ? person.arabicName : person.name;
            
            let html = `
                <div class="person-details">
                    <h2>${displayName}</h2>
                    <div class="relationships">
            `;
            
            const relTypes = [
                { key: "parents", ar: "الآباء", en: "Parents" },
                { key: "children", ar: "الأبناء", en: "Children" },
                { key: "grandparents", ar: "الأجداد", en: "Grandparents" },
                { key: "grandchildren", ar: "الأحفاد", en: "Grandchildren" },
                { key: "siblings", ar: "الإخوة", en: "Siblings" },
                { key: "uncles", ar: "الأعمام", en: "Uncles" },
                { key: "aunts", ar: "العمات", en: "Aunts" },
                { key: "cousins", ar: "الأبناء", en: "Cousins" },
                { key: "ancestors", ar: "الأسلاف", en: "Ancestors" },
                { key: "descendants", ar: "الأخلاف", en: "Descendants" }
            ];
            
            for (const rel of relTypes) {
                const label = lang === "ar" ? rel.ar : rel.en;
                const value = person.getRelationshipText(rel.key, lang);
                html = html + `
                    <div class="rel-row">
                        <span class="rel-label">${label}:</span>
                        <span class="rel-value">${value}</span>
                    </div>
                `;
            }
            
            html = html + `
                    </div>
                </div>
            `;
            
            const detailsDiv = document.getElementById("details");
            if (detailsDiv) {
                detailsDiv.innerHTML = html;
            }
        }
        
        دالة ارسم_الشجرة() {
            // Draw the family tree visualization
            // This would use SVG or Canvas in a real implementation
            const treeDiv = document.getElementById("tree");
            if (!treeDiv) {
                return;
            }
            
            let html = '<div class="tree-container">';
            
            // Generation 1: Grandparent
            html = html + '<div class="generation">';
            html = html + '<div class="person-node" onclick="selectPerson(\'أحمد\')">أحمد<br>Ahmed</div>';
            html = html + '</div>';
            
            // Generation 2: Parents
            html = html + '<div class="generation">';
            html = html + '<div class="person-node" onclick="selectPerson(\'فاطمة\')">فاطمة<br>Fatima</div>';
            html = html + '<div class="person-node" onclick="selectPerson(\'علي\')">علي<br>Ali</div>';
            html = html + '<div class="person-node" onclick="selectPerson(\'سارة\')">سارة<br>Sara</div>';
            html = html + '</div>';
            
            // Generation 3: Children
            html = html + '<div class="generation">';
            html = html + '<div class="person-node" onclick="selectPerson(\'عمر\')">عمر<br>Omar</div>';
            html = html + '<div class="person-node" onclick="selectPerson(\'ليلى\')">ليلى<br>Layla</div>';
            html = html + '<div class="person-node" onclick="selectPerson(\'خالد\')">خالد<br>Khaled</div>';
            html = html + '<div class="person-node" onclick="selectPerson(\'نور\')">نور<br>Noor</div>';
            html = html + '<div class="person-node" onclick="selectPerson(\'زينب\')">زينب<br>Zainab</div>';
            html = html + '</div>';
            
            html = html + '</div>';
            
            treeDiv.innerHTML = html;
        }
    }
    
    // ==========================================
    // PART 4: Procedural - Initialization - البرمجة الإجرائية
    // ==========================================
    
    // Global component instance
    let familyTreeComponent = null;
    
    function initializeFamilyTree() {
        const container = document.getElementById("app");
        if (!container) {
            return;
        }
        
        // Create component
        familyTreeComponent = new مكون_شجرة_العائلة(container);
        
        // Add all people
        familyTreeComponent.أضف_شخص("Ahmed", "أحمد");
        familyTreeComponent.أضف_شخص("Fatima", "فاطمة");
        familyTreeComponent.أضف_شخص("Ali", "علي");
        familyTreeComponent.أضف_شخص("Sara", "سارة");
        familyTreeComponent.أضف_شخص("Omar", "عمر");
        familyTreeComponent.أضف_شخص("Layla", "ليلى");
        familyTreeComponent.أضف_شخص("Khaled", "خالد");
        familyTreeComponent.أضف_شخص("Noor", "نور");
        familyTreeComponent.أضف_شخص("Zainab", "زينب");
        
        // Draw the tree
        familyTreeComponent.ارسم_الشجرة();
        
        // Select first person
        familyTreeComponent.اختر_شخص("أحمد");
    }
    
    function selectPerson(name) {
        if (familyTreeComponent) {
            familyTreeComponent.اختر_شخص(name);
        }
    }
    
    function toggleLanguage() {
        if (familyTreeComponent) {
            familyTreeComponent.بدل_اللغة();
        }
    }
    
    // Auto-initialize when DOM is ready
    if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", initializeFamilyTree);
    } else {
        initializeFamilyTree();
    }
}

